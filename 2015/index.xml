<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2015s on Xuanwo&#39;s Blog</title><link>https://xuanwo.io/2015/</link><description>Recent content in 2015s on Xuanwo&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 23 Dec 2015 16:15:20 +0000</lastBuildDate><atom:link href="https://xuanwo.io/2015/index.xml" rel="self" type="application/rss+xml"/><item><title>最佳跨平台PDF阅读解决方案</title><link>https://xuanwo.io/2015/12/23/best-pdf-read-solution/</link><pubDate>Wed, 23 Dec 2015 16:15:20 +0000</pubDate><guid>https://xuanwo.io/2015/12/23/best-pdf-read-solution/</guid><description>&lt;p&gt;最近因为学习需要，要大量阅读纯文字的PDF文档。然后我惊讶地发现市场上居然没有哪家提供一套完整可用的跨平台PDF阅读解决方案，于是我在尝试了市面几乎所有叫得上名字的各类阅读器之后，形成了一套自己的跨平台PDF阅读解决方案。本文记录了这套方案的详细内容，希望会有所益处。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>在线视频下载完整解决方案</title><link>https://xuanwo.io/2015/12/18/online-video-download-solution/</link><pubDate>Fri, 18 Dec 2015 12:49:49 +0000</pubDate><guid>https://xuanwo.io/2015/12/18/online-video-download-solution/</guid><description>&lt;p&gt;因为学习需要，产生了一个这样的需求：要从Youtube上批量下载视频。自然，出于方便使用的角度来看，音画不能分离，最好带有对应的字幕。一番搜罗之后，我找到了基于Python的开源产品： &lt;a href=&#34;https://rg3.github.io/youtube-dl/&#34;&gt;youtube-dl&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;值得一提的是，youtube-dl不仅仅能下载youtube上的视频，它支持的视频链接种类多达700+种，几乎囊括了所有在线视频网站，列表参见&lt;a href=&#34;https://rg3.github.io/youtube-dl/supportedsites.html&#34;&gt;此处&lt;/a&gt;。让我不由得感慨开源的力量。除此以外，某些不存在的网址需要自备梯子，不再赘述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>断电也能上网！——路由器改造记</title><link>https://xuanwo.io/2015/11/27/surf-with-poweroff/</link><pubDate>Fri, 27 Nov 2015 01:34:33 +0000</pubDate><guid>https://xuanwo.io/2015/11/27/surf-with-poweroff/</guid><description>&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;
&lt;p&gt;前两天我对我们宿舍的路由器进行了小小的改造，使得我们在断电之后也能照常上网。原理非常简单：就是使用充电宝来给路由器供电——因为我们墙上的网口是不会断电的，所以只要解决了路由器没有电的问题，就可以解决断网问题。路由器要求的输入电压为5V，电流为0.3A，恰好跟我们常用的充电宝是一致的，淘宝买一根USB转DV线成功解决问题。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>文本转换神器——Pandoc</title><link>https://xuanwo.io/2015/11/14/pandoc/</link><pubDate>Sat, 14 Nov 2015 14:29:18 +0000</pubDate><guid>https://xuanwo.io/2015/11/14/pandoc/</guid><description>&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;
&lt;p&gt;Pandoc是一个用haskell编写的文本转换工具，小巧迅速且支持格式广泛，堪称文本转换应用的瑞士军刀。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>Python包分发详解</title><link>https://xuanwo.io/2015/11/03/python-packages/</link><pubDate>Tue, 03 Nov 2015 15:24:06 +0000</pubDate><guid>https://xuanwo.io/2015/11/03/python-packages/</guid><description>&lt;p&gt;用Python写过不少的脚本，现在要把脚本打包成模块并进行发布，然后才明白脚本Boy到正规的码农差距有多大= =。
踩了很多天的坑之后，自己学习到了Python的包分发机制，以及如何利用Pypi向全世界分发自己的模块。现在简单地做一些整理。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>在Python中使用JSON</title><link>https://xuanwo.io/2015/10/30/python-json/</link><pubDate>Fri, 30 Oct 2015 23:47:23 +0000</pubDate><guid>https://xuanwo.io/2015/10/30/python-json/</guid><description>&lt;h1 id=&#34;json介绍&#34;&gt;JSON介绍&lt;/h1&gt;
&lt;p&gt;JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;引用自&lt;a href=&#34;http://www.json.org/json-zh.html&#34;&gt;json.org&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>正则表达式参考手册</title><link>https://xuanwo.io/2015/10/29/regex/</link><pubDate>Thu, 29 Oct 2015 16:26:47 +0000</pubDate><guid>https://xuanwo.io/2015/10/29/regex/</guid><description>&lt;p&gt;一直都知道正则表达式的强大，但是总是觉得正则很难学不会，所以一直不得要领。这次因为工作原因，不得不用到正则，于是顺手将它学了起来。入门之后才发现，花费一点时间学习一下正则非常值得，可以成千上百倍地提升你的工作效率。特别是当你经常和批量数据以及规则文本打交道的时候，你会发现完全离不开正则。闲话到此为止，下面进入正题。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>Hash以及Hash校验工具介绍</title><link>https://xuanwo.io/2015/10/28/hashsum/</link><pubDate>Wed, 28 Oct 2015 11:14:56 +0000</pubDate><guid>https://xuanwo.io/2015/10/28/hashsum/</guid><description>&lt;p&gt;前一阵子的Xcodeghost事件给所有人都好好的上了一课——校验的重要性。无论何时，一定要校验！一定要校验！！一定要校验！！！重要的事情重复三遍总是没错的。如果真的无法做到这一点，最起码这些一定要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统镜像&lt;/li&gt;
&lt;li&gt;底层开发工具&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;选择官方认证的软件源，地址尽可能地使用HTTPS而非HTTP以避免缓存影响&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>使用pyQuery解析HTML</title><link>https://xuanwo.io/2015/10/23/pyquery-intro/</link><pubDate>Fri, 23 Oct 2015 01:03:09 +0000</pubDate><guid>https://xuanwo.io/2015/10/23/pyquery-intro/</guid><description>&lt;h1 id=&#34;pyquery介绍&#34;&gt;pyQuery介绍&lt;/h1&gt;
&lt;p&gt;pyquery 可以让你用jquery语法来对xml进行查询。这个API和jquery十分类似。如果利用lxml，pyquery对xml和html的操作将更加快速。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>Vagrant——构建虚拟开发环境的新思路</title><link>https://xuanwo.io/2015/10/22/vagrant-intro/</link><pubDate>Thu, 22 Oct 2015 09:24:57 +0000</pubDate><guid>https://xuanwo.io/2015/10/22/vagrant-intro/</guid><description>&lt;p&gt;说到虚拟开发环境，人人都觉得好，但是在实际应用中，人们还是在一台电脑上配置所有用到的环境。究其原因，还是因为搭建虚拟开发环境的过程不比在实体机上配置更简单。但是，Vagrant出现了。Vagrant抹平了不同的虚拟化软件的差异，以统一的命令取而代之；抛弃了传统的系统镜像分发安装方式，以直接封装好的虚拟磁盘代替。除此以外，还提供了各种已经封装好的环境下载，搭建一个虚拟开发环境的便利程度有了大幅提高。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>低成本搭建谷歌镜像</title><link>https://xuanwo.io/2015/10/12/7ghost-google/</link><pubDate>Mon, 12 Oct 2015 16:53:25 +0000</pubDate><guid>https://xuanwo.io/2015/10/12/7ghost-google/</guid><description>&lt;p&gt;尽管自己已经搭建好了Shadowsocks等翻墙工具，但是总有一些时刻需要临时地使用Google查看一些网页，这个时候一个可用的谷歌镜像就显得很重要。本文旨在使用低成本方案来搭建一个可用的谷歌镜像服务，用以部分解决这个问题。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>我的五样</title><link>https://xuanwo.io/2015/10/08/my-staff/</link><pubDate>Thu, 08 Oct 2015 11:08:16 +0000</pubDate><guid>https://xuanwo.io/2015/10/08/my-staff/</guid><description>&lt;p&gt;此文用以记录自己用过&amp;amp;在用的各类工具及软件，欢迎推荐&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>微信公众平台数据抓取解决方案</title><link>https://xuanwo.io/2015/09/30/wechat-mp-data-spider/</link><pubDate>Wed, 30 Sep 2015 10:12:58 +0000</pubDate><guid>https://xuanwo.io/2015/09/30/wechat-mp-data-spider/</guid><description>&lt;p&gt;有一个需求是将微信公众平台的数据导出到Excel以进行后续的数据分析。在关注人数等数据上，微信已经提供了Excel导出的接口，但是在图文分析上，尽管有很详细的数据提供，却没有提供一个好的导出接口。所以我需要寻求一个简单的方案来抓取微信公众平台的图文分析数据。&lt;/p&gt;
&lt;h1 id=&#34;分析&#34;&gt;分析&lt;/h1&gt;
&lt;p&gt;图文分析页面是JS加载的，通过后台提交返回数据，然后使用JS渲染生成页面。对着页面分析了一会儿，没有发现比较简单的请求构造方式，但是发现微信给出的数据形式非常有规律，可以采用正则来获取我想要的信息。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>多页批量规则数据抓取解决方案</title><link>https://xuanwo.io/2015/09/24/multi-page-data-spider/</link><pubDate>Thu, 24 Sep 2015 08:04:13 +0000</pubDate><guid>https://xuanwo.io/2015/09/24/multi-page-data-spider/</guid><description>&lt;p&gt;最近完成的一个工作是要抓取某公司的合作伙伴信息，跟上一次的区别在于，这个公司调用了Salesforce之类的第三方CRM服务。合作伙伴的详细信息是需要点开对应的连接之后才可以获得。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>单页批量规则数据抓取解决方案</title><link>https://xuanwo.io/2015/09/22/single-page-data-spider/</link><pubDate>Tue, 22 Sep 2015 09:07:22 +0000</pubDate><guid>https://xuanwo.io/2015/09/22/single-page-data-spider/</guid><description>&lt;p&gt;加入青云后接的第一个活儿是抓取某公司的经销商的全部信息。该公司通过一个动态页面来展示经销商信息，使用后台的POST提交请求数据，并使用JS在页面下方加载请求的经销商信息，而且网址不会发生变化。&lt;/p&gt;
&lt;h1 id=&#34;分析&#34;&gt;分析&lt;/h1&gt;
&lt;p&gt;接到活儿时候还在上课，电脑不在身边，就用手机先看了看页面。每一条数据都不出意外地非常有规律。观察辣个公司的页面源代码，看得头晕脑胀（只有一个萌萌的员工写的一句&lt;code&gt;别删我&lt;/code&gt;让我傻乐了一会儿），无收获。没有办法使用BeautifulSoup，也不会用py来模拟用户的操作，我只好另辟蹊径了。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>译-Ubuntu下五个最好的BT客户端</title><link>https://xuanwo.io/2015/09/01/translated-five-best-bt-client-in-ubuntu/</link><pubDate>Tue, 01 Sep 2015 10:54:20 +0000</pubDate><guid>https://xuanwo.io/2015/09/01/translated-five-best-bt-client-in-ubuntu/</guid><description>&lt;p&gt;&lt;em&gt;本文是我加入LCTT后翻译的第一篇文章，感谢LCTT项目组伙伴们的支持，感谢组长wxy的仔细校对，也欢迎大家加入LCTT项目，共同翻译优质的Linux文章~&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuanwo.io/imgs/opinion/5_Best_Torrent_Ubuntu.png&#34; alt=&#34;Best Torrent clients for Ubuntu Linux&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在寻找 &lt;strong&gt;Ubuntu 中最好的 BT 客户端&lt;/strong&gt;吗？事实上，Linux 桌面平台中有许多 BT 客户端，但是它们中的哪些才是&lt;strong&gt;最好的 Ubuntu 客户端&lt;/strong&gt;呢？&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>Bestcoder Round 16 C Revenge of Nim II</title><link>https://xuanwo.io/2015/08/17/bestcoder-16-revenge-of-nim-ii/</link><pubDate>Mon, 17 Aug 2015 02:09:37 +0000</pubDate><guid>https://xuanwo.io/2015/08/17/bestcoder-16-revenge-of-nim-ii/</guid><description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;
&lt;p&gt;源地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://acm.hdu.edu.cn/showproblem.php?pid=5088&#34;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5088&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;
&lt;p&gt;给你N堆石子，你可以除去其中的某些堆（也可以不除），问你能否使得后手必胜。
这是一道看起来像博弈的数学题，因为我们都知道如果想使得后手必胜，就只需要使得每一堆石子数的异或和为0即可。也就是说，我们只需要找出其中的某一些，他们的异或和为0，然后剩下的全都除去。如果能找到，输出&lt;code&gt;Yes&lt;/code&gt;；找不到，说明不存在，输出&lt;code&gt;No&lt;/code&gt;。&lt;/p&gt;</description></item><item><title>Markdown &#43; Travis CI 构建自己的开源电子书</title><link>https://xuanwo.io/2015/08/12/opensourcebook/</link><pubDate>Wed, 12 Aug 2015 01:31:22 +0000</pubDate><guid>https://xuanwo.io/2015/08/12/opensourcebook/</guid><description>&lt;p&gt;作为一只ACMer，一个非常现实的需求就是我们需要准备自己的模板。在我的想象当中，我们的模板应当有如下的这些特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以生成PDF格式，保证在多个平台下的一致性&lt;/li&gt;
&lt;li&gt;编辑起来比较简单，我的队友无需学习LaTeX即可开始编辑&lt;/li&gt;
&lt;li&gt;共同协作比较方便，我和队友无需将代码互相复制粘贴&lt;/li&gt;
&lt;li&gt;代码必须要支持高亮！（很重要！）&lt;/li&gt;
&lt;li&gt;代码编辑容易，因为我们的模板白手起家，经常会需要修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些需求，单个实现都比较容易，但是如果想要找到一个全部符合并且简单易行的方案，就有些困难了。在&lt;a href=&#34;http://www.larrycaiyu.com/&#34;&gt;@larrycai&lt;/a&gt;推出的&lt;a href=&#34;https://github.com/larrycai/kaiyuanbook&#34;&gt;中文开源电子书项目&lt;/a&gt;的启发下，我想到了使用 &lt;code&gt;Markdown&lt;/code&gt; + &lt;code&gt;Github&lt;/code&gt; + &lt;code&gt;Travis CI&lt;/code&gt; 的一套工具链来构建了我的开源电子书的方法。
下面我来简单地介绍一下。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>史上最详细的虚拟机安装Mac OS X图文教程</title><link>https://xuanwo.io/2015/08/09/vmware-mac-os-x-intro/</link><pubDate>Sun, 09 Aug 2015 01:30:51 +0000</pubDate><guid>https://xuanwo.io/2015/08/09/vmware-mac-os-x-intro/</guid><description>&lt;p&gt;最近在电脑上配置了VMware，想要搭建一个Mac OS X的虚拟机以供体验。不过网上的资料过于老旧，版本更新不及时，导致我在配置的过程中遇到了无数的坑，折腾了一个晚上才配置成功。事后我总结了相关的经验和实践完成了这份教程，希望能够对大家有所益处~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Update:
因为要用到&lt;a href=&#34;https://xuanwo.io/2015/10/22/vagrant-intro/&#34;&gt;Vagrant&lt;/a&gt;，所以又捣鼓了一番在VirtualBox上安装Mac OS X，同样踩了不少坑，相关的总结如下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>动态规划——最长上升子序列问题</title><link>https://xuanwo.io/2015/07/31/dp-lis/</link><pubDate>Fri, 31 Jul 2015 15:58:35 +0000</pubDate><guid>https://xuanwo.io/2015/07/31/dp-lis/</guid><description>&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;
&lt;p&gt;最长上升子序列问题，也就是&lt;code&gt;Longest increasing subsequence&lt;/code&gt;，缩写为&lt;code&gt;LIS&lt;/code&gt;。是指在一个序列中求长度最长的一个上升子序列的问题，是动态规划中一个相当经典问题。在这里我们可以看到，这个上升实质上就是一个对&lt;code&gt;&amp;lt;&lt;/code&gt;进行定义的过程，所以我们求解的其实是一类问题，也就是在给定序列中求解长度最长的符合某一性质的子序列的问题。在下面总结的过程中，我还是以递增为例进行阐述。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>Listary——让文件在指尖流动</title><link>https://xuanwo.io/2015/07/28/listary/</link><pubDate>Tue, 28 Jul 2015 21:48:32 +0000</pubDate><guid>https://xuanwo.io/2015/07/28/listary/</guid><description>&lt;p&gt;今天想为大家介绍的是我使用了两年的神器——&lt;a href=&#34;http://www.listary.com/&#34;&gt;Listary&lt;/a&gt;，作为一款Windows文件浏览增强工具，它为Windows自带的资源管理器添加了很多实用的功能，包括智能命令、最近文档以及收藏功能。与此同时，它还能与很多第三方应用集成，包括鼎鼎大名的Total Commander，还有WinRAR，7zip，FileZilla等等。
值得一提的是，Listary由国人Channing开发，默认添加了简体中文支持，是不可多得的精品，典型的墙内开花墙外香的典范。可能是由于国人还并不是非常重视效率这个方面，感觉使用Listary的主要人群还是集中在国外，从Listary的论坛上也能看得出来。所以我完成了这样一篇文章，希望我也能为这样的精品应用在国内的推广做出些贡献。
恩？说我是水军？唔，谁说我不是呢？
&lt;em&gt;官网上的广告语&lt;code&gt;Keep files at your fingertips&lt;/code&gt;被我翻译成了&lt;code&gt;让文件在指尖流动&lt;/code&gt;，不知道Channing会怎么想~&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>2015年中国地质大学(北京)14级ACM程序设计结课赛</title><link>https://xuanwo.io/2015/07/16/cugb-2015-acm-final/</link><pubDate>Thu, 16 Jul 2015 20:09:41 +0000</pubDate><guid>https://xuanwo.io/2015/07/16/cugb-2015-acm-final/</guid><description>&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;
&lt;p&gt;本次结课赛中，我共出了三题，分别是个人赛中的&lt;a href=&#34;http://acm.cugb.edu.cn/showproblem.php?problemid=1888&#34;&gt;B&lt;/a&gt;，&lt;a href=&#34;http://acm.cugb.edu.cn/showproblem.php?problemid=1885&#34;&gt;E&lt;/a&gt;以及组队赛中的&lt;a href=&#34;http://acm.cugb.edu.cn/showproblem.php?problemid=1886&#34;&gt;C&lt;/a&gt;。根据队长的指示，题目的难度并不高，基本上都是以字符串的处理为主（然后被大一AK了= =，心塞塞）。下面我针对各个题目，给出一份题解，希望现场赛没有做出来的童鞋可以继续思考。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>基于Socket.io的虚拟计算机</title><link>https://xuanwo.io/2015/07/06/socket-vm/</link><pubDate>Mon, 06 Jul 2015 21:05:38 +0000</pubDate><guid>https://xuanwo.io/2015/07/06/socket-vm/</guid><description>&lt;p&gt;基于Socket.io有很多特别强大的应用，socket.io官方提供的一个&lt;a href=&#34;http://socket.io/demos/computer/&#34;&gt;虚拟计算机Demo&lt;/a&gt;就非常赞。通过将使用Qemu虚拟取出来的PC界面转发至Socket.io的端口，然后对Canvas不断地进行绘制，形成了近似与远程操控的体验。我们&lt;a href=&#34;http://xuanwo.io/2015/06/30/together-project/&#34;&gt;Together项目&lt;/a&gt;用到了这个库，但由于这个库发布于很久之前，再加上相关文档过少，导致部署起来极为困难。所以我完成了这篇文章，希望能让后来人少走一些弯路。
&lt;em&gt;下文基于Ubuntu 14.04 x64，其他系统请自行转换相应命令，谢谢~&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Teambition团队协作实践</title><link>https://xuanwo.io/2015/07/02/teambition-work/</link><pubDate>Thu, 02 Jul 2015 19:08:55 +0000</pubDate><guid>https://xuanwo.io/2015/07/02/teambition-work/</guid><description>&lt;p&gt;&lt;a href=&#34;http://xuanwo.io/2015/06/30/together-project/&#34;&gt;Together&lt;/a&gt;团队组建完成后，一个现实的问题在于：我们怎么样进行协作。经过一番筛选之后，我选中了Teambition，一个简约但是够用的团队协作平台。我们团队围绕着我们的需求，基于Teambition建立了我们自己的协作平台。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>使用Screen管理会话</title><link>https://xuanwo.io/2015/07/01/screen-ssh/</link><pubDate>Wed, 01 Jul 2015 09:49:31 +0000</pubDate><guid>https://xuanwo.io/2015/07/01/screen-ssh/</guid><description>&lt;p&gt;在实现&lt;a href=&#34;http://xuanwo.io/2015/06/30/together-project/&#34;&gt;Together项目&lt;/a&gt;的过程中，有一个需求是需要下载一个500M左右系统镜像包，由于文件源在国内，国外的下载速度简直感人。在经历多次因为SSH超时导致下载意外终止后，我终于决定要解决掉这个问题。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>Together网站项目设计</title><link>https://xuanwo.io/2015/06/30/together-project/</link><pubDate>Tue, 30 Jun 2015 11:08:47 +0000</pubDate><guid>https://xuanwo.io/2015/06/30/together-project/</guid><description>&lt;p&gt;&lt;strong&gt;本项目仍然处在设计阶段，一切变动以最终成果为准&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;团队介绍&#34;&gt;团队介绍&lt;/h1&gt;
&lt;h2 id=&#34;团队分工&#34;&gt;团队分工&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;丁皓（组长），负责网站后端建设及维护（兼产品经理？）&lt;/li&gt;
&lt;li&gt;满全勇，负责网站着陆页设计&amp;amp;文案&lt;/li&gt;
&lt;li&gt;何壁伟，负责网站内容页设计&lt;/li&gt;
&lt;li&gt;马可，担任网站首席体验师&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;协同工具&#34;&gt;协同工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分工：&lt;a href=&#34;https://www.teambition.com/&#34;&gt;Teambition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;交流：&lt;a href=&#34;http://www.qq.com/&#34;&gt;QQ&lt;/a&gt;，&lt;a href=&#34;https://jianliao.com/&#34;&gt;简聊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分享：&lt;a href=&#34;https://www.yinxiang.com/&#34;&gt;印象笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>信息资源管理复习</title><link>https://xuanwo.io/2015/06/19/information-manage-review/</link><pubDate>Fri, 19 Jun 2015 16:58:58 +0000</pubDate><guid>https://xuanwo.io/2015/06/19/information-manage-review/</guid><description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;h2 id=&#34;信息资源的分类-方法和类别&#34;&gt;信息资源的分类，方法和类别&lt;/h2&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类&lt;/h3&gt;
&lt;p&gt;信息资源的类型可以根据多种标准来划分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;</description></item><item><title>数据库系统概论复习</title><link>https://xuanwo.io/2015/06/12/database-review/</link><pubDate>Fri, 12 Jun 2015 14:33:29 +0000</pubDate><guid>https://xuanwo.io/2015/06/12/database-review/</guid><description>&lt;h1 id=&#34;绪论&#34;&gt;绪论&lt;/h1&gt;
&lt;h2 id=&#34;数据库系统概述&#34;&gt;数据库系统概述&lt;/h2&gt;
&lt;p&gt;数据（Data）： 描述事物的符号记录称为数据。
记录： 计算机中表示和存储数据的一种格式或一种方法。
数据库（DataBase，简称DB）： 数据库是长期存储在计算机内、有组织的、可共享的大量数据的集合。
特点：
- 数据按一定的数据模型组织、描述和存储
- 可为各种用户共享
- 冗余度较小
- 数据独立性较高
- 易扩展&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>史上最详细的Hexo博客搭建图文教程</title><link>https://xuanwo.io/2015/03/26/hexo-intor/</link><pubDate>Thu, 26 Mar 2015 00:22:43 +0000</pubDate><guid>https://xuanwo.io/2015/03/26/hexo-intor/</guid><description>&lt;p&gt;从2014年的八月份开始接触Hexo，一直用到现在，已经有半年的时间了。这期间，Hexo从2.X一路升级到了3.0，很多地方都发生了改变。不仅如此，很多原来使用Hexo的博主们写下了的教程并没有及时更新，导致后来人一头雾水，挫折感十足。因此，本文致力于提供一份足够简单，长期维护的基于Github Pages的Hexo博客搭建图文教程，希望能有所帮助。
当然，我个人的力量是有限的，因此也希望使用Hexo的大家也能一起行动起来，通过&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/pulls&#34;&gt;提交PR&lt;/a&gt;，&lt;a href=&#34;https://github.com/Xuanwo/xuanwo.github.io/issues&#34;&gt;发布issues&lt;/a&gt;或者在下方评论区评论等形式参与到本文档的编辑中来。浏览时，使用&lt;code&gt;Ctrl+F&lt;/code&gt;搜索关键词。&lt;em&gt;（是不是会有似曾相识的感觉，= =）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>数论——快速幂</title><link>https://xuanwo.io/2015/03/18/number-theory-quick-pow/</link><pubDate>Wed, 18 Mar 2015 17:43:59 +0000</pubDate><guid>https://xuanwo.io/2015/03/18/number-theory-quick-pow/</guid><description>&lt;h1 id=&#34;原始代码&#34;&gt;原始代码&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;int Pow(int A, int n)
{
if (n == 0) return 1;
int rslt = 1;
for (int i = 0; i &amp;lt; n; ++i)
{
rslt *= A;
}
return rslt;
}
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>数论——筛法求素数</title><link>https://xuanwo.io/2015/03/18/number-theory-sieve-method-to-find-primes/</link><pubDate>Wed, 18 Mar 2015 17:16:01 +0000</pubDate><guid>https://xuanwo.io/2015/03/18/number-theory-sieve-method-to-find-primes/</guid><description>&lt;h1 id=&#34;暴力瞎搞求素数&#34;&gt;暴力瞎搞求素数&lt;/h1&gt;
&lt;p&gt;首先，我们需要个判断是否为素数的算法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bool IsPrime(unsigned n) //此处n是一个大于2的整数
{
for (unsigned i = 2; i &amp;lt; n / 2 + 1; ++i)
{
if (n % i == 0)
{
return false;
}
}
return true;
}
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>数论——欧几里得算法</title><link>https://xuanwo.io/2015/03/11/number-theory-gcd/</link><pubDate>Wed, 11 Mar 2015 10:32:31 +0000</pubDate><guid>https://xuanwo.io/2015/03/11/number-theory-gcd/</guid><description>&lt;h1 id=&#34;欧几里得算法&#34;&gt;欧几里得算法&lt;/h1&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;欧几里得算法，又名辗转相除法，是求最大公约数的算法。两个整数的最大公约数是能够同时整除它们的最大的正整数。辗转相除法基于如下原理：两个整数的最大公约数等于其中较小的数和两数的差的最大公约数。例如，252和105的最大公约数是21（252 = 21 × 12；105 = 21 × 5）；因为252 − 105 = 147，所以147和105的最大公约数也是21。在这个过程中，较大的数缩小了，所以继续进行同样的计算可以不断缩小这两个数直至其中一个变成零。这时，所剩下的还没有变成零的数就是两数的最大公约数。
&lt;img src=&#34;https://xuanwo.io/imgs/summary/Euclidean_algorithm_252_105_animation_flipped.gif&#34; alt=&#34;辗转相除法的演示动画&#34; /&gt;
参考辗转相除法的演示动画：两条线段分别表示252和105，其中每一段表示21。动画演示了循环从大数中减去小数，直到其中一段的长度为0，此时剩下的一条线段的长度就是252和105的最大公约数。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>青云参观计划</title><link>https://xuanwo.io/2015/02/18/event-qingcould-plan/</link><pubDate>Wed, 18 Feb 2015 22:50:33 +0000</pubDate><guid>https://xuanwo.io/2015/02/18/event-qingcould-plan/</guid><description> 青云是啥？ 想做中国的AWS：IaaS提供商QingCloud按“秒”计费实现弹性特征，瞄准中国的DevOps开发市场 国内创业公司QingCloud的魄力：做一个世界级的IaaS服务 青云B轮获2000万美元VC的背后逻辑：用技术超越巨头 个人认为对其的了解有助与我们信息管理专业的发展，所以尝试着联系了一下青云的有关人士。后来发现青云那边的人非常nice，非常热心，非常爽快的同意了我们的请求，所以开学后不久我们就可以出发啦。
青云在哪？ 地址：北京市朝阳区北苑路甲13号北辰新纪元大厦2号楼1503 公交路线：地铁13号线 → 地铁2号线 → 地铁5号线全程约1小时
五道口 3站 乘坐 地铁13号线(西直门方向), 在 西直门站 下车 420米 站内换乘 地铁2号线(内环) 4站 乘坐 地铁2号线(内环), 在 雍和宫站 下车 160米 站内换乘 地铁5号线(天通苑北方向) 6站 乘坐 地铁5号线(天通苑北方向), 在 北苑路北站 下车(A2西北口出) 350米 步行至 北辰新纪元2 去看什么？ 公司参观 员工分享个人经历 CEO分享关于云计算的理解 啥时候去？ 2015年3月19日14点
有啥收获？ 这个根据看到了什么而定，不过涨姿势肯定是有的~ 我想看看真正的服务器长啥样= =
更新日志 2015年02月18日 发起活动，修正行文格式。 2015年03月18日 补充活动更新信息。</description></item><item><title>使用Github SSH Key以免去Hexo部署时输入密码</title><link>https://xuanwo.io/2015/02/07/generate-a-ssh-key/</link><pubDate>Sat, 07 Feb 2015 14:40:16 +0000</pubDate><guid>https://xuanwo.io/2015/02/07/generate-a-ssh-key/</guid><description>&lt;p&gt;原文本来放在&lt;a href=&#34;http://xuanwo.io/2014/08/14/hexo-usual-problem/&#34;&gt;Hexo常见问题解决方案&lt;/a&gt;之中，但是由于步骤较多，理解起来比较困难，因此将本文独立出来单独成篇，以便于进行操作。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>使用Travis CI自动部署Hexo</title><link>https://xuanwo.io/2015/02/07/travis-ci-hexo-autodeploy/</link><pubDate>Sat, 07 Feb 2015 14:00:51 +0000</pubDate><guid>https://xuanwo.io/2015/02/07/travis-ci-hexo-autodeploy/</guid><description>&lt;p&gt;前两天了解到了一个有趣的概念叫持续集成：
&amp;gt; 持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。
然后想到我的博客也恰好满足这样的需求，因为我的博客一旦有了修改，就必须要重新build并且部署，那么能不能用持续集成的思想来改造我部署博客的流程呢？&lt;/p&gt;
&lt;p&gt;在这样的指导思想下，我完成了上一篇文章：&lt;a href=&#34;https://xuanwo.io/2015/02/05/VPS-Hexo-Autodeploy/&#34;&gt;VPS搭配Github Webhook实现Hexo自动发布&lt;/a&gt;，而今天我要介绍一下，在没有VPS的情况下，如何更方便的配置自己的持续集成的博客。&lt;/p&gt;
&lt;h1 id=&#34;好处&#34;&gt;好处&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;方便：只需要一次配置，便省去了每一次编辑文档后，都需要进行&lt;code&gt;hexo d -g&lt;/code&gt;的麻烦，更不必说文章增多之后渲染时间还会增长。&lt;/li&gt;
&lt;li&gt;稳定：这个是最近才发现的，Github被搞了之后，很多人反映不能更新博客了，使用&lt;code&gt;Travis CI&lt;/code&gt;，你只要想办法提交一个小md文档，就能进行构建。如果自己手动构建，只要一个文件上传失败，前面的工作都白费了。&lt;/li&gt;
&lt;li&gt;快捷：即使是出差在外，只要能编辑Markdown，就可以撰写博客，使得Hexo拥有类似于WP一致的体验~&lt;/li&gt;
&lt;li&gt;协作：博客的构建完全交由&lt;code&gt;Travis CI&lt;/code&gt;进行，所以完全可以通过&lt;code&gt;Hexo&lt;/code&gt;+&lt;code&gt;git&lt;/code&gt;构建一个多人协作的博客平台。实际上，Hexo的&lt;a href=&#34;https://hexo.io/&#34;&gt;官网&lt;/a&gt;正是这样构建的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>VPS搭配Github Webhook实现Hexo自动发布</title><link>https://xuanwo.io/2015/02/05/vps-hexo-autodeploy/</link><pubDate>Thu, 05 Feb 2015 23:22:30 +0000</pubDate><guid>https://xuanwo.io/2015/02/05/vps-hexo-autodeploy/</guid><description>&lt;p&gt;自从买了VPS之后，我的人生就多了一个需要思考的问题——我的VPS还能用来干嘛？然后想到Github有一个Webhook的功能，可以在每一次提交之后发送一个POST到指定的URL。那么，只要找一个办法获取这个POST，再执行指定的命令，可以实现Hexo的自动发布功能了。从此以后，不管在哪里，我只要修改我的md文件，push之后我的服务器就能自动进行编译并且部署了。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item><item><title>超星学术视频下载处理一条龙</title><link>https://xuanwo.io/2015/01/07/chaoxing-download/</link><pubDate>Wed, 07 Jan 2015 01:12:07 +0000</pubDate><guid>https://xuanwo.io/2015/01/07/chaoxing-download/</guid><description>&lt;p&gt;我妹纸最近开始通过看超星学术视频来&lt;del&gt;复习&lt;/del&gt;预习课程了，所以我必须搞到对应课程的所有视频（不管是收费还是免费），而且我妹纸还是一个有强迫症的萌妹纸，所有的视频都必须按照顺序拍的好好的，要不然她就会不舒服。
根据以上描述，我需要解决以下需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;破解超星学术视频的加密链接，找到真实的下载链接。&lt;/li&gt;
&lt;li&gt;重命名下载下来的视频文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还是跟以往一样，直接把最终的解决方案放出来，要是对具体的实现感兴趣的可以接着往下面看。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description></item></channel></rss>