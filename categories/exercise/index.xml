<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exercise on Xuanwo&#39;s Blog</title>
    <link>https://xuanwo.org/categories/exercise/</link>
    <description>Recent content in Exercise on Xuanwo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 17 Aug 2015 02:09:37 +0000</lastBuildDate>
    
	<atom:link href="https://xuanwo.org/categories/exercise/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bestcoder Round 16 C Revenge of Nim II</title>
      <link>https://xuanwo.org/2015/08/17/bestcoder-16-revenge-of-nim-ii/</link>
      <pubDate>Mon, 17 Aug 2015 02:09:37 +0000</pubDate>
      
      <guid>https://xuanwo.org/2015/08/17/bestcoder-16-revenge-of-nim-ii/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://acm.hdu.edu.cn/showproblem.php?pid=5088&#34;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=5088&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给你N堆石子，你可以除去其中的某些堆（也可以不除），问你能否使得后手必胜。
这是一道看起来像博弈的数学题，因为我们都知道如果想使得后手必胜，就只需要使得每一堆石子数的异或和为0即可。也就是说，我们只需要找出其中的某一些，他们的异或和为0，然后剩下的全都除去。如果能找到，输出&lt;code&gt;Yes&lt;/code&gt;；找不到，说明不存在，输出&lt;code&gt;No&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 1594 Ducci Sequence</title>
      <link>https://xuanwo.org/2015/08/16/uva-1594-ducci-sequence/</link>
      <pubDate>Sun, 16 Aug 2015 04:04:26 +0000</pubDate>
      
      <guid>https://xuanwo.org/2015/08/16/uva-1594-ducci-sequence/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4469&#34;&gt;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4469&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;h2 id=&#34;题意分析&#34;&gt;题意分析&lt;/h2&gt;

&lt;p&gt;题意十分简单，给定一个序列的变换，每一次都把当前位置上的数变为当前位置与下一个位置差的绝对值。然后问你这个序列最后是变成一个循环还是全都变为0。&lt;/p&gt;

&lt;h2 id=&#34;暴力做法&#34;&gt;暴力做法&lt;/h2&gt;

&lt;p&gt;一开始看题目的时候感觉很难下手，不知道应该怎样去判断这个序列能否构成一个循环。但是注意到另外一个条件——题目中给出了最大的循环次数，1000次。再加上n的值比较小，也就是说，我完全可以暴力模拟一千次，如果还是没有全为0的串的话，这个串一定是一个循环的串。基于这种想法，我可以得到一个非常简单的暴力算法。&lt;/p&gt;

&lt;h2 id=&#34;floyd判圈算法&#34;&gt;Floyd判圈算法&lt;/h2&gt;

&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;

&lt;p&gt;这道题已经AC了，但是问题并没有结束。回到我最一开始的想法——我该如何判断一个序列是否构成了循环呢？这样，我们就引出了一个算法：&lt;a href=&#34;https://zh.wikipedia.org/zh/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95&#34;&gt;Floyd判圈算法&lt;/a&gt;。是的，这个Floyd就是那个最短路算法的发明者。
这个算法可以在有限状态机，迭代函数或者链表上判断是否存在环，并求出该环的起点和长度的算法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2015年中国地质大学(北京)14级ACM程序设计结课赛</title>
      <link>https://xuanwo.org/2015/07/16/cugb-2015-acm-final/</link>
      <pubDate>Thu, 16 Jul 2015 20:09:41 +0000</pubDate>
      
      <guid>https://xuanwo.org/2015/07/16/cugb-2015-acm-final/</guid>
      <description>&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;

&lt;p&gt;本次结课赛中，我共出了三题，分别是个人赛中的&lt;a href=&#34;http://acm.cugb.edu.cn/showproblem.php?problemid=1888&#34;&gt;B&lt;/a&gt;，&lt;a href=&#34;http://acm.cugb.edu.cn/showproblem.php?problemid=1885&#34;&gt;E&lt;/a&gt;以及组队赛中的&lt;a href=&#34;http://acm.cugb.edu.cn/showproblem.php?problemid=1886&#34;&gt;C&lt;/a&gt;。根据队长的指示，题目的难度并不高，基本上都是以字符串的处理为主（然后被大一AK了= =，心塞塞）。下面我针对各个题目，给出一份题解，希望现场赛没有做出来的童鞋可以继续思考。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 65 A Way Too Long Words (Div. 2)</title>
      <link>https://xuanwo.org/2015/02/10/cf-71a/</link>
      <pubDate>Tue, 10 Feb 2015 23:11:25 +0000</pubDate>
      
      <guid>https://xuanwo.org/2015/02/10/cf-71a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/71/A&#34;&gt;http://codeforces.com/problemset/problem/71/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;刷水题，保持手指灵活性= =&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VK Cup 2012 Qualification Round 1 A Next Round</title>
      <link>https://xuanwo.org/2015/02/10/cf-158a/</link>
      <pubDate>Tue, 10 Feb 2015 22:07:24 +0000</pubDate>
      
      <guid>https://xuanwo.org/2015/02/10/cf-158a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/158/A&#34;&gt;http://codeforces.com/problemset/problem/158/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;水题&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CF拉练第七场</title>
      <link>https://xuanwo.org/2014/11/26/contest-cugb-cf7/</link>
      <pubDate>Wed, 26 Nov 2014 16:40:28 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/26/contest-cugb-cf7/</guid>
      <description> 比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=63852#overview
比赛总结 这场比赛做的很渣，第一题卡了很久，还WA了两发。第二题一个裸的最短路模板题还折腾了半天。第三题是一个比较简单的数论题，用到了GCD。然后D和E都没有敲出来，其实D是一个要用到一点技巧的裸Nim。而E题。。。正面解法思绪繁杂，没有捋出来，而从结果入手开开脑洞倒是可以有点思路= =。
分题讲解 A题（暴力） 从前后分别入手求出和，然后对应进行判断即可。 http://xuanwo.org/2014/11/26/CF-18C/
B题（最短路） 模板题，注意路径的输出。 http://xuanwo.org/2014/11/26/CF-20C/
C题（数论） 用到了GCD，只要找出原来的最简比例就可以了。 http://xuanwo.org/2014/11/26/CF-16C/
D题（Nim博弈） 用到了很多异或的性质，位运算果然是一门大学问。 http://xuanwo.org/2014/11/26/CF-15C/
E题（DP，构造） 这个题= =，还没有办法证明。 http://xuanwo.org/2014/11/23/CF-15E/
更新日志  2014年11月26日 完成题解。  </description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 15 C Industrial Nim</title>
      <link>https://xuanwo.org/2014/11/26/cf-15c/</link>
      <pubDate>Wed, 26 Nov 2014 14:25:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/26/cf-15c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/15/C&#34;&gt;http://codeforces.com/problemset/problem/15/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;有n个矿场，第i个矿场有mi辆矿车，第一辆矿车有xi颗石头，第二辆xi+1颗，如此递推，直到第mi辆有mi+xi-1颗。然后有两个人轮流取石头（金矿？），他们可以选择任意一个矿场任意一辆矿车取走任意非0数量的石头，直到第一个不能再取的人认输。
实际上，这就是一个裸的Nim博弈问题，只要直接运用结论就能完成解答。但是问题在于，数据太多，导致每一个全都异或起来的话耗时太长。所以需要采用一些手段处理一下。我们需要用到两个结论：第一，从1异或到n的答案存在着这样一个特性：n%4==1时，答案为1；n%4==2时，答案为x+1；n%4==3时，答案为0；n%4==4时，答案为x。第二，从x异或到y的值等于nim(x-1)^nim(y)。
经过上述的处理，最后的结果就出来了~&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 16 C Monitor (Div. 2 Only)</title>
      <link>https://xuanwo.org/2014/11/26/cf-16c/</link>
      <pubDate>Wed, 26 Nov 2014 14:04:11 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/26/cf-16c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/16/C&#34;&gt;http://codeforces.com/problemset/problem/16/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一道关于分辨率转化的问题。要求将一个大分辨率按照指定的宽高比进行转化，如果宽高比不符，则进行切割。首先，我们来求一个x和y的最大公约数d，然后分别令x=x/d，y=y/d，这样就得到了x和y之间最简的比例形式。然后a和b分别去除以x和y，得到的两个背书中去掉小数部分较小的那个，就是切割之后的倍数比。最后得到的结果就是符合要求的结果。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Alpha Round 20 C Dijkstra? (Codeforces format)</title>
      <link>https://xuanwo.org/2014/11/26/cf-20c/</link>
      <pubDate>Wed, 26 Nov 2014 13:59:18 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/26/cf-20c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/20/C&#34;&gt;http://codeforces.com/problemset/problem/20/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;实际上题目不难，但是我们都捣鼓了很久。原因是我们根本就没有掌握这种算法，导致连一个输出路径都搞得这么蛋疼。使用邻接表来存储每一个节点，每一个节点都自带一个指针指向下一个节点（可以自己使用数组模拟），最后的结果倒过来输出即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 18 C Stripe (Div.2 Only)</title>
      <link>https://xuanwo.org/2014/11/26/cf-18c/</link>
      <pubDate>Wed, 26 Nov 2014 13:16:29 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/26/cf-18c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/18/C&#34;&gt;http://codeforces.com/problemset/problem/18/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意很简单，把一个给定的数列分成两份，要求两份数字之和相等。直接暴力乱搞，预处理的时候用两个数组分别保存前后缀的数字之和，然后只要遍历一遍，就能得到最后的结果。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 272 TEX Quotes</title>
      <link>https://xuanwo.org/2014/11/25/uva-272-tex-quotes/</link>
      <pubDate>Tue, 25 Nov 2014 10:40:48 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/25/uva-272-tex-quotes/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=829&amp;amp;page=show_problem&amp;amp;problem=208&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=829&amp;amp;page=show_problem&amp;amp;problem=208&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;同样的，题目很简单。只需要考虑当前处理的是前面的还是后面的那个引号。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 10082 WERTYU</title>
      <link>https://xuanwo.org/2014/11/25/uva-10082-wertyu/</link>
      <pubDate>Tue, 25 Nov 2014 10:34:01 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/25/uva-10082-wertyu/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=829&amp;amp;page=show_problem&amp;amp;problem=1023&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=829&amp;amp;page=show_problem&amp;amp;problem=1023&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;很简单的一道题，不过想了很久。我觉得需要注意的地方大概有三处：
- 不用自己手写所有情况的判断，使用一个字符串数组可以高效地解决问题。
- 可以采用一边读入一边处理的方法，不需要开一个数组来保存所有的数，更何况那样做还要处理空格和回车的问题。
- 读题的时候忽略了两处地方，多行以及没有&lt;code&gt;QAZ&lt;/code&gt;这些字符，导致最后处理的时候出现了问题。
注意到这些，这道题就可以轻松A了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 15 E Triangles</title>
      <link>https://xuanwo.org/2014/11/23/cf-15e/</link>
      <pubDate>Sun, 23 Nov 2014 13:50:17 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/23/cf-15e/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/15/problem/E&#34;&gt;http://codeforces.com/contest/15/problem/E&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;数学渣，这道题无从下手= =。为了方便能自己看出一些东西来，我打了前两项的表去CF提交，幸运地得到了n=6的解，结果是1354。这个结果印证了昨晚比赛时候我的一些想法，因为&lt;code&gt;10=(2^2+1)*2&lt;/code&gt;，&lt;code&gt;74=(6^2+1)*2&lt;/code&gt;，&lt;code&gt;1354=(26^2+1)*2&lt;/code&gt;。也就是说，最后的结果一定是某一个数的平方加上一再乘二的结果。这样，这个问题就转化成了，如何找到那个数。我们可以看到，这个数组成的数列是&lt;code&gt;2 6 26&lt;/code&gt;。考虑到最后的取模，这个数一定是指数级别的，要不然增长速度太慢了，作为一个未来的码农，想到的第一个数列就是2 4 8。乍一看感觉跟&lt;code&gt;2 6 26&lt;/code&gt;扯不上关系，不过再观察一下，&lt;code&gt;2 6 26&lt;/code&gt;向前递减之后可以得到另外一个衍生数列，也就是&lt;code&gt;2 4 20&lt;/code&gt;。第一个反应就是&lt;code&gt;20=4*5&lt;/code&gt;，但是对不上啊，4怎么处理？小脑一动，对啊，4=4*1。1和5跟原数列有什么关系呢？可以看到，&lt;code&gt;1=4-3&lt;/code&gt;，&lt;code&gt;5=8-3&lt;/code&gt;。
写到这里，脑子里面已经是一团浆糊了，我来列成表格梳理一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a  c  b
2  4  2
4  4  6
8  20 26

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样可以看出，a=pow(2,i)，c就等于c*(a-3)，明显，b=b+c。于是我就得到了最后的公式。
以上，是通过偷鸡往后再推了一项得到的题解，在实际的比赛中，一方面题目不会再给你下一项（CF倒是可以用这种方法骗答案），另一方面，真的比赛中思路也不会这么清晰。所以还是要学习正规的组合数学+DP的做法，在我学会之前，还是先挖一个坑吧= =。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 6 B President&#39;s Office (Div.2 Only)</title>
      <link>https://xuanwo.org/2014/11/22/cf-6b/</link>
      <pubDate>Sat, 22 Nov 2014 17:59:29 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/22/cf-6b/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/6/B&#34;&gt;http://codeforces.com/problemset/problem/6/B&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;总统的办公室里面坐着他的副手，然后每个人都会有一张办公桌（长短不一，但每个人都有自己的颜色）。然后告诉你每个人的办公桌都是长方形，给定一个描述办公室布局的图，要你求出这个办公室里面总统的副手有几个。
一开始我想得太多，觉得应该用DFS来暴力搜索，只要判断总统办公桌的四周即可。后来发现这种方法是不可行，决定采用STL里面的pair+set来做。思路很简单，既然已经告诉我办公桌都是长方形的，那么，我只要找到总统办公桌所占的区域，然后直接遍历这块区域外围的一圈即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CF拉练第六场</title>
      <link>https://xuanwo.org/2014/11/21/contest-cugb-cf6/</link>
      <pubDate>Fri, 21 Nov 2014 22:56:15 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/21/contest-cugb-cf6/</guid>
      <description> 比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=63720#overview
比赛总结 做的好渣= =，跟SB一样卡B题的字符串卡半天。以后出问题了一定要仔细检查循环的初始值的问题。然后D题的脑洞大开也是神奇，后来学长提到了左偏树，有空一定要补一补。。
分题讲解 A题（暴力） 没啥好说的，暴力乱搞。 http://xuanwo.org/2014/11/21/CF-12A/
B题（暴力，排序） 写得很挫- -，暴力乱搞过了，应该是数据弱。。 http://xuanwo.org/2014/11/21/CF-12C/
C题（贪心） 想清楚区间与区间之间的关系，并不是很难。 http://xuanwo.org/2014/11/21/CF-14B/
D题（脑洞DP） 这个DP也是神了，其实并没有怎么用到DP的思想，关键在于结论是怎样得出的。 http://xuanwo.org/2014/11/21/CF-13C/
E题（树状数组） 一碰到数据结构就A不了，只会暴力乱搞和开脑洞，太弱了。 http://xuanwo.org/2014/11/21/CF-12D/
更新日志  2014年11月21日 完成题解。  </description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 12 D Ball (Div.2 Only)</title>
      <link>https://xuanwo.org/2014/11/21/cf-12d/</link>
      <pubDate>Fri, 21 Nov 2014 22:35:22 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/21/cf-12d/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/12/problem/D&#34;&gt;http://codeforces.com/contest/12/problem/D&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一个很神奇的题目= =。
给你N个女人的Beauty，Intelect，Richness值。在i女人和j女人之间如果有Bi&amp;lt;Bj&amp;amp;&amp;amp;Ii&amp;lt;Ij&amp;amp;&amp;amp;Ri&amp;lt;Rj,那么i女人就会去自杀！。！问总共有多少个女人会自杀= =。（这心理是有多阴暗。。。。）
实际上感觉就是一个三维的排序，不过有些细节需要处理。
首先开一个结构体来保存b，i，r以及id号。然后对每一个女人的beauty值排序，然后将b值离散化，作为这个树状数组的下标。然后再对i值进行排序，这样，每次只要getmax(lady[j].id+1)，就能得到当前最大的女的r值。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 13 C Sequence</title>
      <link>https://xuanwo.org/2014/11/21/cf-13c/</link>
      <pubDate>Fri, 21 Nov 2014 22:06:59 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/21/cf-13c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/13/C&#34;&gt;http://codeforces.com/problemset/problem/13/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给定一个序列，然后对于每一个数，你都可以进行自增或者自减操作。要求求出使得这个序列变为非减序列的最少操作次数。
我一开始的想法比较朴素，我想，只要找到一个比较的标准，比这个标准大我就&amp;ndash;，比这个标准小我就++，这样就能得到这个非减序列的最少次操作。然后我就开始寻找这样的标准，后来发现，这是一个不可能的任务。因为给定的序列什么可能都有，我没有办法来衡量每一个数对于整体值的重要程度，然后也没有办法来计算操作的次数。
没有思路之后就开始开脑洞了。很显然，我可以得到这样一个结论，对于一个序列中的某一个数而言，步数最少的，肯定是变成左边或者右边的那个数。如果再考虑到对于整体数列的影响（因为这是一个循环的过程，整个数列都有整体上移或者下移的趋势），这个数可能的取值，肯定是这个数列中已经存在的数。不难猜想，如果这个数变成的最后结果不是这个数列中的数，说明这个解一定不是最优解。（因为要么就多操作了，要么就少操作了。
这么说好像有点难懂，我来举一个栗子吧，就是数列&lt;code&gt;4 1 9&lt;/code&gt;。很显然，我们一眼就能看出，最优解的状态应该是&lt;code&gt;4 4 9&lt;/code&gt;，也就是这个1恰好变成了4。试想，如果1变成了3，状态变为&lt;code&gt;4 3 9&lt;/code&gt;，不合题意；如果1变成了5，状态变为&lt;code&gt;4 5 9&lt;/code&gt;，符合题意，但是操作数多了1。那么问题来了，我变成&lt;code&gt;3 3 9&lt;/code&gt;，难道不好吗？确实是这样，符合题意，而且结果最优。但是我们可以继续想，&lt;code&gt;3 3 9&lt;/code&gt;可以，&lt;code&gt;2 2 9&lt;/code&gt;可以吗？再继续，&lt;code&gt;1 1 9&lt;/code&gt;可以吗？&lt;code&gt;0 0 9&lt;/code&gt;可以吗？然后我们就能看出，位于&lt;code&gt;4 4 9&lt;/code&gt;到&lt;code&gt;1 1 9&lt;/code&gt;之间的数列都是可以的，超过了就不行了。这里的4和1，都是原来数列里面的数。我想，这或许并不是能不能问题，而是算法设计方便的问题。如果取原来数列的数，我们直接进行判断即可；如果不是，我们依然是要取原来数列里的数，判断是否在区间内。
根据上面的讨论，我们不妨得出这样的结论：对任何数进行的操作，最后的结果都是把它们变成原数列中的某个数。
解决了理论上的问题之后，下面进入实际的编码过程。直接开二维数组暴力搞的话，这个问题的时间复杂度过高，不可行。所以我们需要对原数组来一次sort，保证b数组是递增的。然后我们可以看到，dp的过程中，只会用到前后两个数，因此我们可以使用滚动数组来降低空间复杂度。这样，这个问题就得到解了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 14 B Young Photographer (Div. 2)</title>
      <link>https://xuanwo.org/2014/11/21/cf-14b/</link>
      <pubDate>Fri, 21 Nov 2014 21:56:23 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/21/cf-14b/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/14/B&#34;&gt;http://codeforces.com/problemset/problem/14/B&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一个摄影师要拍摄运动员比赛的照片，然后给定摄影师的坐标，以及每一位运动员的活动范围。要求计算出摄影是需要活动的最小步数。
首先我们需要对输入的数据进行一次处理，也就是必须保证左端比右段小。处理完毕之后，两端分别进行sort，这样就得到了运动员活动范围的起点和终点的有序列。显然，只有当最大的起点比最小的终点还小的时候，摄影师才有可能同时看到。然后，如果当前摄影师的坐标比最大的起点小，他只要移动到最大起点即可；如果当前摄影师的坐标比最小的终点大，他就需要移动到最小终点。
这样，我们就得到了摄影师需要移动的距离。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 12 C Fruits (Div.2 Only)</title>
      <link>https://xuanwo.org/2014/11/21/cf-12c/</link>
      <pubDate>Fri, 21 Nov 2014 21:54:07 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/21/cf-12c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/12/problem/C&#34;&gt;http://codeforces.com/contest/12/problem/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意并不复杂：给定一些标价牌，然后再给定一些水果的名字，每种水果对应一个标价牌。要求输出水果总价的最大值和最小值。
第一眼感觉很简单，贪心乱搞。标价牌排序之后，如果求最小值就从前往后选；如果求最大值，就从后往前选。这个思路没有太大的问题，然后问题来了，我怎么样才能够得到一个去除重复项，并且能计算出每种水果数量的数据结构呢？
然后我就开始SB了，因为循环的时候字符串写得搓，debug半天，都不符合我的预期。等到队友们基本都过了，我才勉强A题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 12 A Super Agent (Div.2 Only)</title>
      <link>https://xuanwo.org/2014/11/21/cf-12a/</link>
      <pubDate>Fri, 21 Nov 2014 21:44:24 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/21/cf-12a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/12/A&#34;&gt;http://codeforces.com/problemset/problem/12/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;问题很简单，要求判断是不是一个中心对称的图形。
直接暴力搞，判断了六次。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CF拉练第四场</title>
      <link>https://xuanwo.org/2014/11/19/contest-cugb-cf4/</link>
      <pubDate>Wed, 19 Nov 2014 15:59:18 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/19/contest-cugb-cf4/</guid>
      <description> 比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=62931#overview
比赛总结 这场比赛开的时候，我还在南京= =，并没有好好做，过了水题之后就没有继续往下做了。 剩下的都是赛后补的题，不过自己的DP确实弱，很多都是自己想不明白，一看题解就懂。
分题讲解 A题（阅读题） 题意理解题，只要读懂题目就能A，并不是很难。 http://xuanwo.org/2014/11/13/CF-9A/
B题（字符串） C题（模拟） 感觉也是题意理解题，没有什么算法，只要模拟出翻面的操作就可以。 http://xuanwo.org/2014/11/13/CF-7A/
D题（扩展欧几里得） 用到了扩展欧几里得，模板题。 http://xuanwo.org/2014/11/19/CF-7C/
E题（状态压缩DP） 一开始不是特别明白，折腾了很久才看懂这个递推的公式。 http://xuanwo.org/2014/11/19/CF-8C/
更新日志  2014年11月19日 初稿。  </description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 8 C Looking for Order</title>
      <link>https://xuanwo.org/2014/11/19/cf-8c/</link>
      <pubDate>Wed, 19 Nov 2014 13:11:43 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/19/cf-8c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/8/C&#34;&gt;http://codeforces.com/problemset/problem/8/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;群里面讨论时，萌神说是一个状态压缩DP，然后我就主动放弃了这道题= =。
实际上，如果用枚举的方法来更新DP，肯定会超时的，有一个小小的技巧在于，小女孩拿东西是没有顺序的。然后在每一次拿东西的时候，都需要更新出两个状态，一种是只拿一个，另一种是拿两个。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 7 C Line</title>
      <link>https://xuanwo.org/2014/11/19/cf-7c/</link>
      <pubDate>Wed, 19 Nov 2014 10:40:15 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/19/cf-7c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/7/C&#34;&gt;http://codeforces.com/problemset/problem/7/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;扩展欧几里得算法的模板题。
题意很简单，给定方程Ax + By + C = 0。要求满足该方程的两个整数解x，y。
通过简单的变形之后就可以得到x = x&lt;em&gt;(-C/gcd(A,B)) ,  y = y&lt;/em&gt;(-C/gcd(A,B))。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 10003 Cutting Sticks</title>
      <link>https://xuanwo.org/2014/11/16/uva-10003-cutting-sticks/</link>
      <pubDate>Sun, 16 Nov 2014 17:12:15 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/uva-10003-cutting-sticks/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=944&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=944&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;之前在COJ上好像做过类似的题目。
同样是木材切割，不过这次每次切割都会消耗跟木棒长度相同的代价，要求的是最小代价的切割。
小脑一动就可以知道，存在递推公式：
&lt;code&gt;dp[x][y]=min(dp[x][y],dp[x][a[k]]+dp[a[k]][y]+y-x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 11400 Lighting System Design</title>
      <link>https://xuanwo.org/2014/11/16/uva-11400-lighting-system-design/</link>
      <pubDate>Sun, 16 Nov 2014 16:33:57 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/uva-11400-lighting-system-design/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2395&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2395&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;变量多的题目确实头疼，我来稍微捋一下。
题目中给出n中灯泡，不同的灯泡要用不同的电源，相同的灯泡可以使用相同的电源。然后每种灯泡有着四种参数，电压v，电源费用k，每个灯泡的费用c，所需要的该种灯泡的数量l。小脑一动就能明白，每次更换只会采用同一种灯泡，因为不同中灯泡的话要买两种电源，一定不是最优解。
这样的话，按照电压进行排序之后，可以得到递推公式：
&lt;code&gt;dp[i]=min(dp[i], dp[j]+(sum[i]-sum[j])*s[i].c+s[i].k)&lt;/code&gt;
其中sum[i]=sum[i-1]+s[i].l;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 12563 Jin Ge Jin Qu hao</title>
      <link>https://xuanwo.org/2014/11/16/uva-12563-jin-ge-jin-qu-hao/</link>
      <pubDate>Sun, 16 Nov 2014 16:16:48 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/uva-12563-jin-ge-jin-qu-hao/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4008&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4008&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;~看完题目的名字就情不自禁的笑了= =。~
这就是一个变形的背包问题：在t-1的时间内，最多可以选择多少歌曲使得歌曲数最多并且播放时间最长，差不多可以类比于ACM竞赛中的AC数和罚时。先比较播放歌曲数，取歌曲数较多者；如果歌曲数相同，比较播放时长，取播放时间较长的。
处理之后，就成了一个背包+一些判断的问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 116 Unidirectional TSP</title>
      <link>https://xuanwo.org/2014/11/16/uva-116-unidirectional-tsp/</link>
      <pubDate>Sun, 16 Nov 2014 15:39:47 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/uva-116-unidirectional-tsp/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=52&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=52&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这道题和之前做过的一道求最大四位数和有点像。那道题我是用暴力+乱搞过得，这道题则是用了刚学的DP。
不用看题，光是看图和样例就能明白大概的题意：给定一个m*n的矩阵，要求从左往右依次选择n个数，使得这n个数的和最小。不过存在这样的限制条件：首先，每次都只能选择当前数的相邻数，也就是右上，右方，右下；其次，要求字典序最小。
找到这样的一个序列并不难，不过要求输出字典序最小的就有点麻烦。通过从右向左来扫描，就能解决这样的问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 1347 Tour</title>
      <link>https://xuanwo.org/2014/11/16/uva-1347-tour/</link>
      <pubDate>Sun, 16 Nov 2014 14:35:27 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/uva-1347-tour/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4093&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4093&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给出n个定点，要求计算出连接这些点的最短闭合路径。
使用dp[i][j]来保存从i到1再从1到j的最短距离。然后可以得到这样两条递推公式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dp[i][i-1]=min(dp[i][i-1],dp[i-1][j]+dis(i,j));
dp[i][j]=dp[i-1][j]+dis(i,i-1);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后的结果就是遍历一遍dp[n][i]+dis(n,i)，找到最小值。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CF拉练第五场</title>
      <link>https://xuanwo.org/2014/11/16/contest-cugb-cf5/</link>
      <pubDate>Sun, 16 Nov 2014 13:06:10 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/contest-cugb-cf5/</guid>
      <description> 比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=62933#overview
比赛总结 前面被BC艹了一顿爆零之后，这场手感还不错。好多都是暴力+乱搞的题目，打得还行。不过自己的DP还是太弱，那场DP还得好好补，要不然像E这种题目只能看人品。
分题讲解 A题（字符串） 贪心+乱搞，水过的题目。为了抢时间都没有测数据，幸运1A。 http://xuanwo.org/2014/11/16/CF-11A/
B题（进制转换） 机智+乱搞。 这个题正好跟前面那场BC有点像，能过也有点运气成分。不过思路出来之后敲得有点慢，这个是弱点。水题要出的快，出的稳，这样才能保住铜牌，233333。 http://xuanwo.org/2014/11/16/CF-9C/
C题（暴力） 暴力+乱搞。 这道题只要能正确的找出导致BUG的两类情况就能A，我少考虑了一种，WA了一发，2A。 http://xuanwo.org/2014/11/16/CF-8B/
D题（字符串Hash，DP） 字符串Hash+乱搞。 开了一个好几个50万的数组乱搞，感谢CF不限制内存占用= =。 http://xuanwo.org/2014/11/16/CF-7D/
E题（神DP） 有一个神奇的递推公式，猜一猜，看RP，赛后出证明。 http://xuanwo.org/2014/11/16/CF-9D/
更新日志  2014年11月16日 完成题解。  </description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 9 D How many trees? (Div.2 Only)</title>
      <link>https://xuanwo.org/2014/11/16/cf-9d/</link>
      <pubDate>Sun, 16 Nov 2014 11:41:12 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/cf-9d/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/9/D&#34;&gt;http://codeforces.com/problemset/problem/9/D&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;神DP，给战斗民族的数学功底跪了。
一个二叉搜索树，要求左子树的和小于右子树，问存在多少个这样的数。由题意可以推出这样一个结论：左子树的和小于右子树，只要左子树的最大值小于右子树的最大值即可，因为2^0+2^1+2^p-1&amp;lt;2^p。
所以在求dp[i][j]~（dp[i][j]表示i个点组成高度小于等于j的树的总数）~的时候，有两种情况：
1. 子树的中n-1个点权在左子树，要么全在右子树，这样的话就没有条件限制了。
2. 如果左右子树都有，那么最大的肯定要放在右子树上，所以除了当前根和最大的点，其他点（总共i-2个）随便取 ,枚举左子树最多放几个,右子树最多放几个就可以推出来。
转移转移方程为：&lt;code&gt;dp[i][j]+=dp[k][j-1]*dp[i-k-1][j-1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 7 D Palindrome Degree</title>
      <link>https://xuanwo.org/2014/11/16/cf-7d/</link>
      <pubDate>Sun, 16 Nov 2014 11:29:22 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/cf-7d/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/7/D&#34;&gt;http://codeforces.com/problemset/problem/7/D&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;被引入的新概念吓到了= =，其实这道题就是一个求最大回文串的问题。
不过按照这个数据量，每一次都进行strcmp肯定不现实，所以我们需要一个好的字符串hash（的板子）。预处理之后，分别计算前缀和后缀的hash值。如果hash值相等，说明前缀和后缀相同，它们的度数就是长度/2再加上一。然后结果就是度数的和。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;字符串hash的时候那个素数开大一点比较好，不用去处理hash冲突，23333。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 8 B Obsession with Robots</title>
      <link>https://xuanwo.org/2014/11/16/cf-8b/</link>
      <pubDate>Sun, 16 Nov 2014 11:16:13 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/cf-8b/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/8/B&#34;&gt;http://codeforces.com/problemset/problem/8/B&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;&lt;del&gt;在那遥远的地方有位好姑娘 ，人们走过她的帐篷都要留恋的张望&lt;/del&gt;
23333，不逗比了，真正的题解开始。
在一个无穷大的平面上，有一个机器人可以自由地上下左右移动。然后在它移动的路径上，你可以给它设置任意个障碍。如果存在一种障碍的设计，使得机器人的移动路径是最短路径，则OK；如果不存在，则存在BUG。
这道题写得很逗= =。一开始作死用switch来写，不过在字符的判断上好像写搓了，怎么写都是BUG。后来想到可以用一个vis来标记机器人走过的路径，如果存在一个点被访问过两次，那么这个路径一定不是最短路径。不过这份代码挂了，原因是还存在另外一种可能，比如：&lt;code&gt;URD&lt;/code&gt;。也就是说，只要形成一个类似于U的结构，也一定不是最短路径。一时半会儿没想出来什么高效的方案，干脆暴力敲了一个。设一个flag出来，然后每走一个点，就四个方向判断一下是否访问过，如果&lt;code&gt;flag&amp;gt;=2&lt;/code&gt;，说明一定是BUG。
多亏了CF机子好，居然过了，也是RP好。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 9 C Hexadecimal&#39;s Numbers (Div.2 Only)</title>
      <link>https://xuanwo.org/2014/11/16/cf-9c/</link>
      <pubDate>Sun, 16 Nov 2014 11:05:48 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/cf-9c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/9/C&#34;&gt;http://codeforces.com/problemset/problem/9/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意不难理解。给定一个n，要你求出从0到n有多少个仅用0和1能表示出来的数。
想法很简单，我们先来处理最为简化的情况，如果给定一个二进制数，我们要求出比这个小的二进制数的个数有多少。小脑一动，我们就能知道，这个个数就是这个二进制数转化为十进制数的大小。
那么问题来了，给定一个十进制数，我们怎样才能求出这个最大的二进制数呢？其实我们可以这样来处理：每一位都有三种情况，0或者1或者大于1。0和1不需要进行任何操作，如果大于1，我们则把从这一位起的每一位都变成1。这样处理之后，我们就得到了最大的二进制数。然后就是一个简单的进制转换问题。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;其实当天晚上的BestCoder 18的1003题跟这个有点像，不过做BC的时候，我没有捋清楚思路，最后还是没有敲出来。不过多亏被虐了一发，这道题才顺利地推出了结论。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 11 A Increasing Sequence</title>
      <link>https://xuanwo.org/2014/11/16/cf-11a/</link>
      <pubDate>Sun, 16 Nov 2014 10:45:44 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/16/cf-11a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/11/A&#34;&gt;http://codeforces.com/problemset/problem/11/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给定一个序列，给定一个递增值。要求计算出最少需要多少步，能将这个序列变为递增数列。
第一个想法就是贪心，甚至都不需要读完数列，直接在输入时处理就可以了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 11584 Partitioning by Palindromes</title>
      <link>https://xuanwo.org/2014/11/15/uva-11584-partitioning-by-palindromes/</link>
      <pubDate>Sat, 15 Nov 2014 11:33:53 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/15/uva-11584-partitioning-by-palindromes/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=465&amp;amp;page=show_problem&amp;amp;problem=2631&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=465&amp;amp;page=show_problem&amp;amp;problem=2631&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;原谅我是一个乐盲，看到乐谱就吓出翔，不敢看了= =。
实际上，题意很简单，就是将一个字符串分割为尽量少的串，使得每一个串都是回文串。
一个简单的DP递推。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 1025 A Spy in the Metro</title>
      <link>https://xuanwo.org/2014/11/15/uva-1025-a-spy-in-the-metro/</link>
      <pubDate>Sat, 15 Nov 2014 11:04:23 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/15/uva-1025-a-spy-in-the-metro/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=3466&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=3466&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;其实题目还是蛮吓人的= =，因为上来就是Line1~7的输入。其实题意不难，有从左到右编号为1~n的车站，有m1辆车从第1站往右开，有m2辆车从第2站往左开。主角在t=0的时候从第1站出发，要在t时刻遇见车站n的一个间谍。要求求出最短的等待时间，没有的话就输出impossible。
小脑一动，可以知道，每一次有三个选择：等待，向左，向右。我们可以用dp[t][i]来表示第t时刻在第i个车站，然后用vis[t][i][sta]来表示三种选择。全部预处理一遍之后，dp求解最短时间即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 7 A Kalevitch and Chess</title>
      <link>https://xuanwo.org/2014/11/13/cf-7a/</link>
      <pubDate>Thu, 13 Nov 2014 19:34:59 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/13/cf-7a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/7/A&#34;&gt;http://codeforces.com/problemset/problem/7/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;同样是理解题- -。
给定一个被黑白棋子占满的棋盘，能进行的操作为将一行或者一列由黑色变白色，问最少需要多少步，能将棋盘全都变为白色。
一开始感觉应该用DFS来做，但是想了想，其实用模拟就能搞定。思路很简单，只要用两层循环，由上到下，由左到右，判断是否为&lt;code&gt;B&lt;/code&gt;。如果是&lt;code&gt;B&lt;/code&gt;，则有tmp++；如果不是，则继续。再然后，判断tmp是不是等于8，如果是，则进行一次行的翻转，如果不是，则列的翻转数为tmp。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 9 A Die Roll (Div.2 Only)</title>
      <link>https://xuanwo.org/2014/11/13/cf-9a/</link>
      <pubDate>Thu, 13 Nov 2014 15:29:45 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/13/cf-9a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/9/problem/A&#34;&gt;http://codeforces.com/contest/9/problem/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;阅读题= =，实际上，只要Dot的点数比其他两个人中大的那个人大就行。
直接用switch搞定。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CF拉练第二场</title>
      <link>https://xuanwo.org/2014/11/07/contest-cugb-cf2/</link>
      <pubDate>Fri, 07 Nov 2014 10:19:52 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/07/contest-cugb-cf2/</guid>
      <description> 比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=62027#overview
比赛总结 水掉A和B之后，就卡在了C和D上。C只是一个变形的最长上升子序列，却没有敲出来；D题是卡了半天，输出各种理解错，一直到还有20分钟结束的时候才过，这时候已经没有时间看E了。不过赛后了看，反正我也过不了E，23333。
分题讲解 A题（模拟） 没啥好说的，其实根本就不用判断人名是否相同。 http://xuanwo.org/2014/11/05/CF-5A/
B题（模拟，字符串） 注意理解题意，是左右摆动以保持平衡。 http://xuanwo.org/2014/11/05/CF-5B/
C题（LIS） 稍微变形一下的最长上升子序列就写不出来，说明做题太死板，不懂变通，要加强。 http://xuanwo.org/2014/11/07/CF-4D/
D题（贪心） 小心输出上的trick= =。 http://xuanwo.org/2014/11/07/CF-3B/
E题（几何） 论开脑洞的重要性，没有完善的证明。 http://xuanwo.org/2014/11/06/CF-2C/
更新日志  2014年11月7日 完成题解。  </description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 3 B Lorry</title>
      <link>https://xuanwo.org/2014/11/07/cf-3b/</link>
      <pubDate>Fri, 07 Nov 2014 10:18:47 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/07/cf-3b/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/3/B&#34;&gt;http://codeforces.com/problemset/problem/3/B&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;读懂题略微花了一点时间，主要是生词多，有点吓人= =。有一辆卡车，要装载一些船只，有1和2两种。然后给出n个船的类型和容积，要求给定卡车体积v的情况下，装载的船的最大容积。
一开始的想法是理解成一个背包问题，但是给的v太大，用DP处理可能会超时。后来就用简单一点的思路，直接暴力贪心。把两种船分开，分别进行排序。小脑一动就能明白，最优解肯定是选取价值高的，然后枚举选择i只1船，则选择2船只的个数就是min((v - i) / 2, tc)*其中tc为2船总个数*。
输出上有一个trick，就是每个编号之间都有一个空格= =，因此WA一发。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 4 D Mysterious Present</title>
      <link>https://xuanwo.org/2014/11/07/cf-4d/</link>
      <pubDate>Fri, 07 Nov 2014 10:05:24 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/07/cf-4d/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/4/D&#34;&gt;http://codeforces.com/problemset/problem/4/D&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目好像是俄罗斯套娃的二维版，就是求一个二维的最长上升子序列问题。
只要按照其中一个变量排序，然后求第二个变量的最长上升子序列即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 2 C Commentator problem</title>
      <link>https://xuanwo.org/2014/11/06/cf-2c/</link>
      <pubDate>Thu, 06 Nov 2014 23:40:26 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/06/cf-2c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/2/problem/C&#34;&gt;http://codeforces.com/contest/2/problem/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意很清楚，就是给定三个点，要求出一个点到这三个点的视角相同。要是存在多个这样的点，则选择那个视角最大的点。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;小科普——视角
定圆O和不在O上的定点A，从A向O引两条切线，这两条切线所形成的角可以看做视角。
又因为已知O的半径r和OA的长，显然，视角的大小为2*asin(r/OA)，也能够利用sin(r/OA)的值来衡量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;做法很神= =，首先找出这个三个点构成的三角形的圆心，然后计算出sin(r/OA)的值，然后分别在上下左右探测，看看哪个值更小。如此循环，直到step的值小于eps就能输出了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 11093 Just Finish it up</title>
      <link>https://xuanwo.org/2014/11/06/uva-11093-just-finish-it-up/</link>
      <pubDate>Thu, 06 Nov 2014 14:18:10 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/06/uva-11093-just-finish-it-up/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2034&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2034&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;比赛的时候没有敲出来。
当时看范神拿了一血，默默地去看题。然后觉得应该跟小白书上那个加油站的优先队列是一样的题目，敲了一会儿之后感觉不对，然后就放弃了这道题。后来想想，这两道题的区别在于，一个是环形的路线，一个是单向的路径，处理的方法应该是不一致的。比赛过后想到，其实就算是环形，也是可以处理成单向问题的。只要开一个两倍MAXN的数组，然后从起点开始截取n个数，就能将一个环从起点处截成一条直线。然后就能用类似的办法进行处理了。
具体的实现过程是这样：只要用一个数组保存可以添加的油量，然后不断减去消耗的油量，然后再不断进行求和。很显然，当&lt;code&gt;a[i]&amp;gt;=start&lt;/code&gt;时，这个站点时可以通过的；当&lt;code&gt;a[i]&amp;lt;start&lt;/code&gt;时，这个站点是不可通过的。然后再遍历寻找字典序最小的起点。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 12627 Erratic Expansion</title>
      <link>https://xuanwo.org/2014/11/05/uva-12627-erratic-expansion/</link>
      <pubDate>Wed, 05 Nov 2014 20:11:48 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/05/uva-12627-erratic-expansion/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4352&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4352&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;因为有图，所以题意还是蛮清楚的。求给定时间，给定范围中气球的个数= =。
也是我心比天高太年轻，试图直接把红球个数和n关系直接撸出来，后来发现着实有点困难。不过发现每当过去一小时，这一行的红球数都会变为原来的两倍。这样问题就变得简单了起来，我只要使用一次递归分治就可以了~&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 10954 Add All</title>
      <link>https://xuanwo.org/2014/11/05/uva-10954-add-all/</link>
      <pubDate>Wed, 05 Nov 2014 20:06:21 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/05/uva-10954-add-all/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=1895&#34;&gt;http://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=1895&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;很明显的一道水题，不过我WA了一发。
我一开始觉得，我可以把每个数重复计算的次数加进去，然后很快写完了一个程序，但是报了WA。稍微查了一会儿之后，感觉没有什么问题，又因为很多人过了，于是推倒用优先队列重新写了一发。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 1471 Defense Lines</title>
      <link>https://xuanwo.org/2014/11/05/uva-1471-defense-lines/</link>
      <pubDate>Wed, 05 Nov 2014 19:51:46 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/05/uva-1471-defense-lines/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4217&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4217&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;不理会逗比的国王们= =，题意很清楚，给定一个序列，要求删除一段连续的序列之后，剩下的连续递增序列最长，要求输出满足题意的序列的长度。
在初始化的时候，就可以设数组l[MAXN]，r[MAXN]来分别保存从左起和从右起的最长递增序列的长度。然后用STL内置的二分来寻找链接的地方，&lt;code&gt;lower_bound(Min + 1, Min + 1 + n, a[i])&lt;/code&gt;，返回在数组Min[1~n+1]中比a[i]大的第一个数的位置。在for循环中不断更新ans的值，使得最后的结果一定最长的序列。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 11572 Unique Snowflakes</title>
      <link>https://xuanwo.org/2014/11/05/uva-11572-unique-snowflakes/</link>
      <pubDate>Wed, 05 Nov 2014 19:38:51 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/05/uva-11572-unique-snowflakes/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2619&#34;&gt;http://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2619&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意是酱紫的：给定一组数，叫你求出不含有重复数字的最长子序列的长度。
使用数组pos[x]记录数字x第一次出现的位置，初始化为-1。枚举这个数列，依次记录每一个数的位置。然后用start标记当前这个子序列的起点。显然的，当枚举到i的时候，如果有&lt;code&gt;pos[arr[i]]&amp;lt;start&lt;/code&gt;，说明这个数肯定在[start, i-1]之间出现过。此时就停止本次枚举，要是&lt;code&gt;pos[arr[i]]&amp;gt;start&lt;/code&gt;，则长度+1，并且进行下一次枚举。直到结束，最后的长度一定是最长的子序列。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 11054 Wine trading in Gergovia</title>
      <link>https://xuanwo.org/2014/11/05/uva-11054-wine-trading-in-gergovia/</link>
      <pubDate>Wed, 05 Nov 2014 19:34:31 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/05/uva-11054-wine-trading-in-gergovia/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1995&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1995&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;我又逗了= =，想得太复杂。
其实不管两个村庄距离有多远或者是他们的需求量有多大，每个村庄实际上都只能跟最近的两个村庄交易，因为运输的时候会经过每一个村庄。因此直接搞就可以了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 1152 4 Values whose Sum is 0</title>
      <link>https://xuanwo.org/2014/11/05/uva-1152-4-values-whose-sum-is-0/</link>
      <pubDate>Wed, 05 Nov 2014 19:31:30 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/05/uva-1152-4-values-whose-sum-is-0/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=3593&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=3593&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意非常清楚，就是在一个矩阵里面找出四个数，使得他们的和为零。
一开始的想法是DFS，把这个看成一个四层的图，不停搜索就行了。但是DFS写得太搓了，各种姿势挂，后来决定二分暴力乱搞。
思路是这样，把这个矩阵分成左右两份，然后只要一个两层的for循环，就能用两个数组保存下所有可能出现的数字组合的和。有一个小小的技巧是，第二份在保存的时候保存为他们的负数，这样在后面的二分中，只要判断是不是相等就可以了，减少了计算量。
最后感慨一下，一千六百万的数组也能开的出来= =。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 1605 Building for UN</title>
      <link>https://xuanwo.org/2014/11/05/uva-1605-building-for-un/</link>
      <pubDate>Wed, 05 Nov 2014 19:10:54 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/05/uva-1605-building-for-un/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4480&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4480&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意要求安排出一个设计方案，使得每一个国家都相邻。
乍一看很复杂，但其实只要构造两层，第一层中第i行都是i国家，第二层中第i列都是i国家，就能满足题意。
额，算是机智题？&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 5 B Center Alignment</title>
      <link>https://xuanwo.org/2014/11/05/cf-5b/</link>
      <pubDate>Wed, 05 Nov 2014 15:43:15 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/05/cf-5b/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/5/problem/B&#34;&gt;http://codeforces.com/contest/5/problem/B&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目不难，不过输出上有点问题，因为题目要求左右均匀分布，上一次偏左则下一次需要偏右。
当总长度为偶数的时候，没有太大的问题；但是当总长度为奇数时，则需要考虑到底应该偏左还是偏右的问题。那么就需要两次判断，首先判断总长度，也就是最大长度是不是
偶数，当总长度不是偶数时，则判断这个字符串是不是偶数。使用一个计数变量num来保存是否是否应该偏左，每一次判断完毕之后都自增一次，这样就能实现保持左右均衡。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 5 A Chat Server&#39;s Outgoing Traffic</title>
      <link>https://xuanwo.org/2014/11/05/cf-5a/</link>
      <pubDate>Wed, 05 Nov 2014 14:41:32 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/05/cf-5a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/5/problem/A&#34;&gt;http://codeforces.com/contest/5/problem/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;很简单的一道水题，实际上就是输出字符串个数和乘上当前聊天室里面的人数的和。
在具体写的时候有几个需要注意的问题：
- 输入，老生常谈了= =。空格的处理通常可以用&lt;code&gt;cin.getline(tmp,MAXN)&lt;/code&gt;（对char数组）或者是&lt;code&gt;getline(cin,tmp);&lt;/code&gt;（对string类）。
- 每次循环的时候，用于保存聊天内容的字符串都必须清空，否则答案会比正确结果大很多。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 12174 Shuffle</title>
      <link>https://xuanwo.org/2014/11/04/uva-12174-shuffle/</link>
      <pubDate>Tue, 04 Nov 2014 22:19:47 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/04/uva-12174-shuffle/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=513&amp;amp;page=show_problem&amp;amp;problem=3326&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=513&amp;amp;page=show_problem&amp;amp;problem=3326&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意真心有点看不懂，原谅我这个没有用过音乐播放器的男人= =。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;使用一个音乐播放器，采用随机播放。随机播放的原理时先随机产生一个1~n的排列，然后就按这个排列顺序播放歌曲。播放完这序列的所有歌曲以后，再次随机生成一个1～n的排列，再继续播放。然后，现在给你一个播放历史记录，但是这个记录是不完整的，因为当它开始记录的时候，有些歌可能已经播放过了但是没有记录到。现在给你一段历史记录和播放器中歌的个数，问历史记录中的第一首歌是某个随机列表的第几首，总共有多少可能？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;整个算法可以分成两段，首先处理min(s,n)中的部分，这部分出现的歌曲都放入一个sames容器，以bool数组ok[i]来记录从标号i开始的歌曲是不是都不相同。然后依次枚举第一首歌是第x首，先检查前s-x是不是都不相同，然后从x开始，依次判断x，x+s，x+2s等等是不是符合条件。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 1451 Average</title>
      <link>https://xuanwo.org/2014/11/04/uva-1451-average/</link>
      <pubDate>Tue, 04 Nov 2014 19:58:06 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/04/uva-1451-average/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=4197&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=4197&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这道题被康逗逗怒拿了FB，默默地去看题，结果完全看不出什么头绪。题意扯到了DNA神马的，其实完全不重要。实际上就是给你一个由0和1组成的串，叫你求出一段长度至少为L的连续子序列，使得这个子序列的平均数最小。如果出现多解，则要求取长度小而且起点小的那个序列。
感觉像是一个DP的题目，但是对如何高效地求出这个最优解没有什么思路。后来在题解中看到了一篇论文&lt;a href=&#34;http://pan.baidu.com/s/1pJJS1Ij&#34;&gt;《浅谈数形结合思想在信息学竞赛中的应用》&lt;/a&gt;。首先，我们可以将目标图形化，取每一个数的序号为X上的变量，取0和1为高度，则可以得出任意两点之间的斜率为&lt;code&gt;(sum[j]-sum[i])*1.0/(j-i)&lt;/code&gt;。然后开始维护一个曲线，保证这个斜率上的每一段曲线都是斜率最大的。
在一个for循环中，设最后的节点是i，i~(L,n)。然后开始寻找这个曲线中满足&amp;gt;L要求的最大斜率。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 1606 Amphiphilic Carbon Molecules</title>
      <link>https://xuanwo.org/2014/11/04/uva-1606-amphiphilic-carbon-molecules/</link>
      <pubDate>Tue, 04 Nov 2014 16:47:35 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/04/uva-1606-amphiphilic-carbon-molecules/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4481&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=4481&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;比赛的时候太紧张，题目都没敢读全= =。
实际上题意还是比较清楚的，给定一个平面，上面有两类点，分别用黑白来表示。现在要求要用一根直线将这个平面分成两半，在直线上面的点全都取走，问，最多能取走多少个点。
具体的方法曾经讲到过，就是扫描线算法：任取一个点为原点，建立极坐标系，其他的点使用极角排序，然后扫描来寻找最大值。
在实现的时候有两个注意点：
- atan2的计算误差不可忽略，极角排序的时候要用叉积的方法进行排序，规避精度问题。
- 叉积方法排序之前，需要做一个投射，将这个平面上的点处理到两个象限中去。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 120 Stacks of Flapjacks</title>
      <link>https://xuanwo.org/2014/11/04/uva-120-stacks-of-flapjacks/</link>
      <pubDate>Tue, 04 Nov 2014 15:19:29 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/04/uva-120-stacks-of-flapjacks/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=56&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=56&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;特别涨姿势的一道题。
题目不难，只要理解题目中所谓的翻转的意思，很好做。但是我在看题解的过程中，被STL的各种酷炫吓呆，感觉string类真的好好用= =。要是自己用char数组模拟的话，可能会写得各种坑。&lt;/p&gt;

&lt;p&gt;默默记录一下：
- &lt;code&gt;istringstream iss(str);&lt;/code&gt;，专门用于操作string类的一个类，可以这样用&lt;code&gt;for(int tmp; iss&amp;gt;&amp;gt;tmp; que.push_front(tmp));&lt;/code&gt;。超酷炫有木有！。！
- &lt;code&gt;deque&amp;lt;int&amp;gt;::iterator it&lt;/code&gt; 迭代器，方便好用不多说= =
- &lt;code&gt;reverse(Max, que.end());&lt;/code&gt; 用于容器中两个元素的交换，超级好用。
- &lt;code&gt;distance(que.begin(), Max)&lt;/code&gt; 返回两个迭代器之间的距离，也是相当的赞。&lt;/p&gt;

&lt;p&gt;恩- -，好好学STL，大有前途。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 714 Copying Books</title>
      <link>https://xuanwo.org/2014/11/04/uva-714-copying-books/</link>
      <pubDate>Tue, 04 Nov 2014 13:29:52 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/04/uva-714-copying-books/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=113&amp;amp;page=show_problem&amp;amp;problem=655&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=113&amp;amp;page=show_problem&amp;amp;problem=655&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;比赛的时候读懂了题意，但是没有拿出来敲，因为感觉自己应该是敲不出来的。实际上，这是一道小白书上提到过的题目，也就是最大值最小化问题。
&lt;img src=&#34;https://xuanwo.org/imgs/exercise/UVa-714.jpg&#34; alt=&#34;算法竞赛入门经典P151&#34; /&gt;
使用一个pos数组来保存是否在此分段，然后使用二分最小值来确定pos的取值。
实际上我还不是能够非常具体地描述中间二分的过程，不妨在二分的循环当中打印pos数组的值来找一找感觉。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Input:
1
9 3
100 200 300 400 500 600 700 800 900

Output:
0 0 0 0 0 1 0 0 0
0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 0 0
0 0 0 1 0 0 1 0 0
0 0 0 1 0 0 1 0 0
0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 1 1 0
0 0 0 0 1 0 1 1 0
0 1 0 0 1 0 1 1 0
0 1 0 0 1 0 1 1 0
0 0 0 0 0 0 0 1 0
0 0 0 0 0 1 0 1 0
0 0 1 0 0 1 0 1 0
0 0 1 0 0 1 0 1 0
0 0 0 0 0 0 0 1 0
0 0 0 0 0 1 0 1 0
0 0 1 0 0 1 0 1 0
0 0 1 0 0 1 0 1 0
0 0 0 0 0 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 0 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 0 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 0 0 0 1 0
0 0 0 0 0 1 0 1 0
0 0 1 0 0 1 0 1 0
0 0 1 0 0 1 0 1 0
0 0 0 0 0 0 0 1 0
0 0 0 0 0 1 0 1 0
0 0 1 0 0 1 0 1 0
0 0 1 0 0 1 0 1 0
0 0 0 0 0 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 0 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 0 0 1 0 0
0 0 0 0 1 0 1 0 0
0 0 0 0 1 0 1 0 0

100 200 300 400 500 / 600 700 / 800 900

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除去最后一行是答案，不去考虑之外，我们可以看到这是一个在中央取值，然后不断向右靠拢的过程。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 11134 Fabled Rooks</title>
      <link>https://xuanwo.org/2014/11/04/uva-11134-fabled-rooks/</link>
      <pubDate>Tue, 04 Nov 2014 12:58:56 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/04/uva-11134-fabled-rooks/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=2075&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=2075&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;比赛的时候没有写出来。其实很容易可以看出来，这个题目可以变成两个子题目，也就是X和Y方向并没有直接的关系，完全可以看成在X方向是不重叠摆放和在Y方向是不重叠摆放的问题。
一开始的想法是只要对它进行排序，然后逐个判断是否符合题意就OK，但是后来发现这样并不能解决问题。后来看了题解，决定采用优先队列来维护可以选择的区间。也就是每次都在区间[l,r]中选取l最小且r最小的区间，然后设一个变量maxx保存一下当前已经摆放到了什么位置。要是存在一个l&amp;lt;maxx，那么则需要将这个l修改为maxx，并且重新放入队列中。这样，就能保证后面的棋子都不会和前面已经摆好的重叠。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>13级个人赛第一场</title>
      <link>https://xuanwo.org/2014/11/04/contest-cugb-13-person-1/</link>
      <pubDate>Tue, 04 Nov 2014 10:28:10 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/04/contest-cugb-13-person-1/</guid>
      <description> 比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=61737#overview
比赛总结 这次比赛打得还行- -，最近生活比较规律，连带着人也变得机智很多，暴力乱搞加开脑洞，过了很多题。但是，也从侧面暴露出编码能力不强，算法功底不扎实的缺点。接下来还是要好好训练，多多刷题。跟队友多交流，相互促进，不停地PUSH自己。
分题讲解 A题（STL，模拟） 比赛的时候真的看不懂题意= =，太弱了。赛后看的题解大涨姿势，学会了好多神奇的技巧。 只要理解了翻转的过程，题目并不是很难。 http://xuanwo.org/2014/11/04/UVa-120-Stacks-of-Flapjacks/
B题（构造） 超想像CLJ一样来一句傻逼题。 开脑洞过了题之后还没反应过来= =，当时的唯一想法是卧槽，这么逗的题怎么没人过？ 然后吐槽了范神带歪了榜= =，导致前面很多水题大家都没做出来。 http://xuanwo.org/2014/11/05/UVa-1605-Building-for-UN/
C题（暴力） 乱搞，开了一个一千六百万的数组二分过了。 不知道是谁告诉我只要学会暴力就能区域赛拿银来着= =。 http://xuanwo.org/2014/11/05/UVa-1152-4-Values-whose-Sum-is-0/
D题（贪心） 把问题想得太复杂，其实X和Y方向根本就没有关系，完全可以分开考虑。 http://xuanwo.org/2014/11/04/UVa-11134-Fabled-Rooks/
E题（贪心） 大胆地喊一句：傻逼题。 想了半天的还差点开始敲网络流模板的我更加傻逼= =。 http://xuanwo.org/2014/11/05/UVa-11054-Wine-trading-in-Gergovia/
F题（几何） 扫描线算法，当年土豪学长跟我们说过，但是打比赛的时候完全没有印象。 也跟读题能力有关系，看到题目长，题意复杂就不敢下手，太弱了，要加强。 http://xuanwo.org/2014/11/04/UVa-1606-Amphiphilic-Carbon-Molecules/
G题（模拟） 一开始以为是神奇的数据结构，实际上不用那么复杂。 http://xuanwo.org/2014/11/05/UVa-11572-Unique-Snowflakes/
H题（二分，乱搞） 感觉是最长上升子序列演变过来的题目。 http://xuanwo.org/2014/11/05/UVa-1471-Defense-Lines/
I题（几何） 赛后看了大神的论文，数形结合是厉害啊= =。 http://xuanwo.org/2014/11/04/UVa-1451-Average/
J题（贪心） 小白书上的最大值最小化问题。 http://xuanwo.org/2014/11/04/UVa-714-Copying-Books/
K题（水题） 傻逼题——我还WA了一发。。。 http://xuanwo.org/2014/11/05/UVa-10954-Add-All/
L题（分治） 貌似是第一次接触分治，这种把大问题分解为多个小问题的思想需要掌握。 http://xuanwo.org/2014/11/05/UVa-12627-Erratic-Expansion/
M题（模拟，剪枝） 很多人过的题，但是我没想出来怎么敲。 http://xuanwo.org/2014/11/06/UVa-11093-Just-Finish-it-up/
N题 O题（模拟） 跟G题有点像，同样是另外开一个数组用来保存第一次出现的位置，这个技巧感觉很有用。 http://xuanwo.org/2014/11/04/UVa-12174-Shuffle/
更新日志  2014年11月5日 完成部分题解。  </description>
    </item>
    
    <item>
      <title>CF拉练第一场</title>
      <link>https://xuanwo.org/2014/11/04/contest-cugb-cf1/</link>
      <pubDate>Tue, 04 Nov 2014 10:28:10 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/04/contest-cugb-cf1/</guid>
      <description> 比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=61581#overview
比赛总结 这场比赛打得很挫，一上来看到D题之前做过，就直接贴了代码，被学长们狠狠地批评了一顿。确实，之前做过并不意味着我就能直接贴我的代码，我再写一次不一定写得出来，而且也丧失了一次检验自己是否真的确实掌握了的机会。以后一定要多注意，比赛态度要端正，不能看到自己做过的题就像占到了便宜一样，直接贴出自己的AC代码。 事实上可以看到，自己跟即将退役的12级差距还是很大的，这些水题都A不掉，或者姿势不优越，考虑不全面，思路受限这些问题暴露的很明显。还是题目做的太少，多做题，多总结。
分题讲解 A题（纯水题） 通过简单的分析就能搞定，一道比较简单的贪心。 http://xuanwo.org/2014/11/03/CF-4B/
B题（DP） 没做出来，一开始想的是DFS，但是没有处理好2跟5，以及出现0的一些情况。赛后看题解，才写出来使用DP的解法。 http://xuanwo.org/2014/11/03/CF-2B/
C题（模拟） WA了很多发，比赛的时候考虑的还是太不全面，没能从正面解决. http://xuanwo.org/2014/11/02/CF-3C/
D题（计算几何） 之前做过的题目，用到了海伦公式和计算圆心角知识。 http://xuanwo.org/2014/10/21/CF-1C/
E题（贪心） 用的贪心的思想，先使得所有的&amp;rsquo;?&amp;lsquo;都变为&amp;rsquo;)&amp;lsquo;，再来处理合法性和最优化的问题。 http://xuanwo.org/2014/11/03/CF-3D/
更新日志  2014年11月3日 初稿。  </description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 4 B Before an Exam</title>
      <link>https://xuanwo.org/2014/11/03/cf-4b/</link>
      <pubDate>Mon, 03 Nov 2014 19:13:39 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/03/cf-4b/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/4/problem/B&#34;&gt;http://codeforces.com/contest/4/problem/B&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;水题一枚。
首先计算出最小的边界和，然后计算出最大的边界和。只要题目给定的sum不在这个范围内，一定无解。然后使用贪心的方法，计算出tem=最大边界和-sum。然后一个一个减去两个边界之间的差值，直到tem被减为零。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 3 D Least Cost Bracket Sequence</title>
      <link>https://xuanwo.org/2014/11/03/cf-3d/</link>
      <pubDate>Mon, 03 Nov 2014 17:18:07 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/03/cf-3d/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/3/problem/D&#34;&gt;http://codeforces.com/contest/3/problem/D&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;比赛的时候没有做出来，赛后看了&lt;a href=&#34;http://siofive.github.io/2014/11/02/%E6%8B%89%E7%BB%831/&#34;&gt;琦神的解题报告&lt;/a&gt;才明白应该怎么敲。
实际上这个题目需要解决两个问题：第一是合法性，也就是是否满足左右括号匹配；第二是最优化，也就是要求Cost消耗最小。
使用一个变量cnt遍历输入的字符串，遇到&amp;rsquo;(&amp;lsquo;则自增，遇到&amp;rsquo;)&amp;lsquo;则自减。这样，只要判断cnt是否为零，就能判断是不是合法。一开始的时候将每一个&amp;rsquo;?&amp;lsquo;都重置为&amp;rsquo;)&amp;lsquo;，然后维护一个保存左右括号消耗差和当前节点的优先队列。然后开始不断地从优先队列中取出键对，使用保存了所有右括号消耗和的ss变量去减。
经过这样的处理之后，cnt只有两种情况。cnt不为零时，说明不可能合法，输出&amp;rdquo;-1&amp;rdquo;，cnt为零时，说明有解，输出ss以及最后符合要求的字符串。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 2 B The least round way</title>
      <link>https://xuanwo.org/2014/11/03/cf-2b/</link>
      <pubDate>Mon, 03 Nov 2014 15:02:38 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/03/cf-2b/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/2/problem/B&#34;&gt;http://codeforces.com/contest/2/problem/B&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;比赛的时候没有做出来，一看就知道应该是一个DP，选取一个2或者5最少的路径。
首先处理一下，设TWO为0，FIVE为1。在输入的时候就进行判断，当前输入的数和&amp;rsquo;0&amp;rsquo;，&amp;rsquo;2&amp;rsquo;，&amp;rsquo;5&amp;rsquo;之间的关系。得到的结果存在一个数组中，这样就得到整个数组中最多的0的个数。然后对2和5的数量进行比较，只需要考虑比较少的那个。
然后对第一个数为0的情况进行特判，此时只要随手输出就可以了。如果第一个数不为0，则开始取2比较少的路径开始行走。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;大概是我写得不是很优美= =，在提交的时候遇到了各种问题，debug了半天，还是没有找出究竟错在哪里。直到我脑洞一开，把所有变量的定义放在了main函数的里面，居然过了！过了！！了！！！
蛋疼，不知道问题到底在哪里= =，唉，存疑。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 4 A Watermelon</title>
      <link>https://xuanwo.org/2014/11/03/cf-4a/</link>
      <pubDate>Mon, 03 Nov 2014 11:23:56 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/03/cf-4a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/4/problem/A&#34;&gt;http://codeforces.com/contest/4/problem/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;真不愧是过了1W+的题= =，水的真可怕。
唯一的trick是当w等于2的时候，不能分成两个偶数。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 3 A Shortest path of the king</title>
      <link>https://xuanwo.org/2014/11/03/cf-3a/</link>
      <pubDate>Mon, 03 Nov 2014 11:03:26 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/03/cf-3a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/3/problem/A&#34;&gt;http://codeforces.com/contest/3/problem/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;第一开始的想法是可以用DFS或者BFS搞定。后来仔细想了想，发现其实不需要这么复杂，通过建立一个坐标系，可以轻松搞定这个问题。
首先坐标化，将A~H转化为1~8，方便后续的处理，同时计算出终点与起点位移在x，y轴上的投影，分别设为mx，my。
然后下面是模拟的步骤：
- 处理斜角：循环对mx和my进行递增或者递减的操作，直到有一个值变为零。
- 处理直线：对mx或者my进行递增或者递减的操作，直到这个值也为零，此时已经模拟完毕。&lt;/p&gt;

&lt;p&gt;有两个值得注意的地方：
- 首先需要输出步数，很显然，步数就是&lt;code&gt;max(abs(mx),abs(my))&lt;/code&gt;。
- 不需要记忆路径，每次处理mx和my的时候，顺便把路径输出即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 3 C Tic-tac-toe</title>
      <link>https://xuanwo.org/2014/11/02/cf-3c/</link>
      <pubDate>Sun, 02 Nov 2014 17:30:22 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/02/cf-3c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/problemset/problem/3/C&#34;&gt;http://codeforces.com/problemset/problem/3/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一开始看到3*3，第一反应是想要枚举出所有可能的情况，也就是总共有9^3次种，但是发现自己很难处理这些情况，后来还是决定用暴力模拟的方法来做。&lt;/p&gt;

&lt;h2 id=&#34;错误解法&#34;&gt;错误解法&lt;/h2&gt;

&lt;p&gt;为了简化情况的讨论，我取&amp;rsquo;.&amp;lsquo;为0，&amp;rsquo;X&amp;rsquo;为1，&amp;rsquo;0&amp;rsquo;为2。这样，只要三个数的积为0，说明没有人胜利；三个数的积为1，说明先手胜；三个数的积为8，说明后手胜。这样，在判定胜负的时候，情况就简单了很多。
但是，我犯的错误就是对非法的状况考虑得不全面，或者说，懒得去自己判定是否非法，直接将非法的判断写在else语句里面，导致这段语句摆在前面挂test4，摆在后面挂test8这样尴尬局面的发生。&lt;/p&gt;

&lt;h2 id=&#34;正确解法&#34;&gt;正确解法&lt;/h2&gt;

&lt;p&gt;赛后我重新写了这道题，正面强干，没有转换成int数组来处理。将胜负判定和非法判定全都写成了独立的函数，在最开始先判断是否非法，然后判定有没有出现胜者，最后判定是谁进行下一步。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 1374 Power Calculus</title>
      <link>https://xuanwo.org/2014/11/02/uva-1374-power-calculus/</link>
      <pubDate>Sun, 02 Nov 2014 15:04:43 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/02/uva-1374-power-calculus/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=512&amp;amp;page=show_problem&amp;amp;problem=4120&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=512&amp;amp;page=show_problem&amp;amp;problem=4120&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这次的题意比较清楚，就是给定n，求出从1变换到n的最小步数。
同样的迭代深搜，- -，我不行了= =，一口气补了三道，整个人都虚了。。&lt;/p&gt;

&lt;p&gt;还是来小结一下吧。以前做的DFS都是裸题，很容易就能看出来。而迭代深搜这一类的题目，通常都是给定一些条件，要求求出指定条件的一些组合，可能是字符串也有可能是数。而且，通常都会有暴力的做法，不过姿势不优越的话，很容易超时。
然后在迭代深搜的过程中，一定要注意初始状态和边界条件，要不然很容易陷入死循环或者无法得到完整的结果。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 129 Krypton Factor</title>
      <link>https://xuanwo.org/2014/11/02/uva-129-krypton-factor/</link>
      <pubDate>Sun, 02 Nov 2014 14:52:47 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/02/uva-129-krypton-factor/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=3&amp;amp;page=show_problem&amp;amp;problem=65&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=3&amp;amp;page=show_problem&amp;amp;problem=65&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意不是很好懂= =，我搬运一下翻译。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Problem
“超级氪因素大赛”(译注：英国的一档电视心智竞答节目）的主办方雇你来对付那些足智多谋的参赛选手。在比赛的一个环节中，节目主持人将念出一长串的字母来考验选手的记忆能力。因为许多选手都是分析字串模式的高手，为了增加一些比赛的难度，主办方决定不再使用那些含有特定重复子串的字串。但是他们又不能将所有重复的子串都删掉，如果那样的话字串中就不存在两个相同的单字了，这反倒会让问题变的非常简单。为了解决这一问题，他们决定仅删除那些包含相邻重复子串的字串。我们将存在上述相邻重复情况的字串称为“easy”（简单），否则称为“hard”（难）。&lt;/p&gt;

&lt;p&gt;Input and Output
为了能给节目主持人提供无限量的问题字串，要求你来写一个程序执行生成运算。程序从输入中读取多行数据，每行包括两个整数n和L（即按此顺序给出），其中n &amp;gt; 0，L的范围是1 ≤ L ≤ 26。根据这些输入，程序要按照字母表升序打印出第n个“hard”字串（由字母表中的前L个字母构成），并在接下来的一行打印这个串的长度。按照上述规则，第一个串应该是“A”。对于给定的n和L，你可以认为第n个“hard”串是一定存在的。
比方说，当L = 3时，头7个“hard”字串为：
A
AB
ABA
ABAC
ABACA
ABACAB
ABACABA
字串可能很长，因此要将它们分成4个字为一组，中间用空格隔开。如果超过16组，则换一行，再接着输出第17组。
ABAC ABA
7
输入由一行两个零表示结束。你的程序可以限定最大的字串长度为80。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;回溯搜索，还用到了string的一些比较方便的函数。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 524 Prime Ring Problem</title>
      <link>https://xuanwo.org/2014/11/02/uva-524-prime-ring-problem/</link>
      <pubDate>Sun, 02 Nov 2014 13:47:34 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/02/uva-524-prime-ring-problem/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=465&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=465&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一开始写了一个特别暴力的程序，吃饭之前让它一直跑，但是一直到我吃完饭回来还在跑14- -，默然泪。
然后推倒重来，开始用回朔法重写。实际上，我并不需要把所有的排列完全生成出来再进行判断，通过回朔法，我可以在生成排列的同时进行判断。这里也运用了深搜的思想，实际上是一个n*n的矩阵，我要找出满足表达式&lt;code&gt;i+A[cur-1]&lt;/code&gt;为指数的那条路径。
搞定了主要的算法，下面就是一些细节的处理。首先，我不需要每一次都调用isPrime函数，因为n&amp;lt;=16，也就是可能出现的最大和是小于32的，我可以在预处理中先判断好是否为质数再拿来用。其次，事先必须指定A[0]=1，vis[1]=1，同时dfs()是从1开始的，注意数组的下标。最后，是输出的处理：每一行末尾的空格，每组数据之间的空行，不要多也不要少，虽然琐碎但是却会决定你能否AC。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 725 Division</title>
      <link>https://xuanwo.org/2014/11/02/uva-725-division/</link>
      <pubDate>Sun, 02 Nov 2014 11:58:24 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/02/uva-725-division/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=9&amp;amp;page=show_problem&amp;amp;problem=666&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=9&amp;amp;page=show_problem&amp;amp;problem=666&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;提议比较简单，给你0~9这十个数字，要求将其组合为两个五位数X和Y，使得其满足&lt;code&gt;X/Y=N&lt;/code&gt;这样的形式。然后就想到了用STL里面的next_permutation函数，很快把代码写了出来，中间还用到了queue来存储答案。不过WA了两发之后开始怀疑是不是STL效率太低导致T了，改用数组模拟，但是还是WA了。经过三个小时的漫长Debug之路，才发现原来问题出在&lt;strong&gt;输入输出&lt;/strong&gt;，&lt;strong&gt;我多输出了一个空行！！！&lt;/strong&gt;
真的是。。。太。。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeVS 1011 数的计算</title>
      <link>https://xuanwo.org/2014/11/01/codevs-1011/</link>
      <pubDate>Sat, 01 Nov 2014 10:39:19 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/01/codevs-1011/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codevs.cn/problem/1011/&#34;&gt;http://codevs.cn/problem/1011/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目的分类是递推，自然就往递推那个方向去想。
通过简单的推理可以发现，f[n]的值恰好等于f[1]~f[n/2]的和，之后的代码就比较简单了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeVS 1012 最大公约数和最小公倍数问题</title>
      <link>https://xuanwo.org/2014/11/01/codevs-1012/</link>
      <pubDate>Sat, 01 Nov 2014 10:17:25 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/01/codevs-1012/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codevs.cn/problem/1012/&#34;&gt;http://codevs.cn/problem/1012/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;自然是水题= =。只要用一个循环就可以搞定，最大公约数用gcd，最小公倍数就是i*j/gcd(i,j)，没有什么问题。
不过这个题意不是很清晰，是否为同一组数字的判断并没有讲到。实际上，&lt;code&gt;3 60&lt;/code&gt;和&lt;code&gt;60 3&lt;/code&gt;是两组数组。这个理解上的问题，导致我的结果一直都是标准答案的一半，折腾了一会儿。
除此之外，这个简单的思路还有很多可以优化的地方，比如在判断了gcd是否等于x之后，后面判断最小公倍数只要使用i*j/x就可以了；还有，一开始令i=x之后，后面每一次都递增x就可以保证i与j始终为x的约束，但注意，还是要用gcd来判断最大公约数是不是x；过题之后找了一下题解，发现有人提出，循环的最大值是sqrt(y)，稍微想了想，确实如此，这个优化也能省下很多循环。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 445 Marvelous Mazes</title>
      <link>https://xuanwo.org/2014/11/01/uva-445-marvelous-mazes/</link>
      <pubDate>Sat, 01 Nov 2014 09:47:48 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/01/uva-445-marvelous-mazes/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=94&amp;amp;page=show_problem&amp;amp;problem=386&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=94&amp;amp;page=show_problem&amp;amp;problem=386&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;我又逗了= =。
题意很简单，给你指定规则的字符串，要求你转换成一个图。
我写了一个特别复杂的实现，结果总是得不到想要的结果。后来才意识到switch语句妙用，顿感自己太不机智了。
实际上，只要对每一个字符进行判断就可以了，如果是数字就叠加起来得到c，如果是b就输出前面算出的c个空格，如果是！就输出回车，如果是字母就输出前面算出来的c个字母。根本就不需要进行复杂的正数处理操作，涨姿势了。
除此之外，还有没有必要等到全部输入完了之后再进行处理。因为本地编译的时候看起来输入和输出混在了一起，实际上，输入来自于stdin，输出来自于stdout，是不会出现混淆的。所以可以放心大胆地进行单行处理，这样就省掉一个超大的二维数组。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 490 Rotating Sentences</title>
      <link>https://xuanwo.org/2014/11/01/uva-490-rotating-sentences/</link>
      <pubDate>Sat, 01 Nov 2014 09:21:56 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/11/01/uva-490-rotating-sentences/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=94&amp;amp;page=show_problem&amp;amp;problem=431&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=94&amp;amp;page=show_problem&amp;amp;problem=431&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意很好理解，就是将字符串旋转九十度。
一开始脑洞开的比较大，想要搞两个字符串数组，然后两个for遍历。后来仔细想想根本就不需要，只要在输出的时候，处理一下顺序就可以了。
然后被卡在了输入输出上面，之前没有做过这种类型的题目，不知道单组的输入怎么结束。后来听学长解释才明白，就算是单组，也可以用EOF来结束的，之后的问题就比较简单了。但是提交之后，挂了一发PE。仔细检查之后，认为问题出在题目中输入的那个换行，除此之外，还有自己先前调用的一个计数变量i的值比应有的值多了1。
Debug之后，幸福的A了&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 414 Machined Surfaces</title>
      <link>https://xuanwo.org/2014/10/31/uva-414-machined-surfaces/</link>
      <pubDate>Fri, 31 Oct 2014 17:13:19 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/31/uva-414-machined-surfaces/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=355&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=355&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意还是比较好理解的，实际上就是求将两端合并，中间还会剩余多少个空格。只要找到X最多的那一行，问题就变得简单了。
不过还是逗了一发，因为忘记把freopen注释掉= =，蛋疼。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeVS 1501 二叉树最大宽度和高度</title>
      <link>https://xuanwo.org/2014/10/31/codevs-1501/</link>
      <pubDate>Fri, 31 Oct 2014 16:45:17 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/31/codevs-1501/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codevs.cn/problem/1501/&#34;&gt;http://codevs.cn/problem/1501/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;数据结构的基础题，不过我把它做成了一道模拟题= =。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 494 Kindergarten Counting Game</title>
      <link>https://xuanwo.org/2014/10/31/uva-494-kindergarten-counting-game/</link>
      <pubDate>Fri, 31 Oct 2014 16:20:15 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/31/uva-494-kindergarten-counting-game/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=435&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=435&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;同样是一道很简单的题目。
只要求出给定的一句话中出现的单词的个数，有两个地方需要注意。
- 输入应当注意不能使用&lt;code&gt;scanf(&amp;quot;%s&amp;quot;, str)&lt;/code&gt;这样的写法，会直接停在有空格的地方。采用getline是一个好主意，不过输入的效率会比较低，要是比较虚的话，可以用速度快一点的gets。
- 具体的单词判断上，我一开始犯了一个错误，认为只要判断空格的个数就OK了，实际上，&lt;code&gt;a_a&lt;/code&gt;是两个单词。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 458 The Decoder</title>
      <link>https://xuanwo.org/2014/10/30/uva-458-the-decoder/</link>
      <pubDate>Thu, 30 Oct 2014 15:16:38 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/30/uva-458-the-decoder/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=399&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=399&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;看起来有点吓人，实际上是一道很水的题目。
直接在编译器里面计算了一下&amp;rsquo;1&amp;rsquo;-&amp;rsquo;*&amp;lsquo;的值，为7。只要字符串里面的每一个字符都减去7，就能得到想要的结果。采用了一个姿势不是很优越的遍历，不知道还有没有更好的优化空间。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 10300 Ecological Premium</title>
      <link>https://xuanwo.org/2014/10/30/uva-10300-ecological-premium/</link>
      <pubDate>Thu, 30 Oct 2014 15:00:57 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/30/uva-10300-ecological-premium/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1241&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1241&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这个是英文阅读理解题= =。
看起来很绕很绕的样子，要求每个动物占据的面积然后乘上什么环境友好度，再乘上动物的个数。实际上，就是求面积乘上环境友好度的和。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeVS 1160 蛇形矩阵</title>
      <link>https://xuanwo.org/2014/10/29/codevs-1160/</link>
      <pubDate>Wed, 29 Oct 2014 22:01:17 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/29/codevs-1160/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codevs.cn/problem/1160/&#34;&gt;http://codevs.cn/problem/1160/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一道模拟的，一直在纠结这个规律怎么推。
一开始的想法是，从最中间开始，由1向n*n不断循环，后来发现这个循环有点难写。折腾了很久还是没有写出来，后来通过观察发现，这个矩阵的右下对角线正好满足一个公差为2的等差数列的平方。根据这个分别来完成递加和递减的过程。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeVS 1083 Cantor表</title>
      <link>https://xuanwo.org/2014/10/29/codevs-1083/</link>
      <pubDate>Wed, 29 Oct 2014 21:05:44 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/29/codevs-1083/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codevs.cn/problem/1083/&#34;&gt;http://codevs.cn/problem/1083/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一道基础题，但是我在如何建立模型上面想了很久。
事实上，我们可以按照斜线分类，第1条斜线有1个数，第2条有2个数，以此类推，第i条有i个数。这样，我们可以很轻松的知道，前i条共有S(i)=&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;&lt;em&gt;i&lt;/em&gt;(i+1)个数。由方程n&amp;lt;=S(k)，我们可以求出n所在的斜线的位置，也就是floor(sqrt(8.0*n+1)-1)/2。
本来在小白书上面，这个问题已经被解决了，但是CodeVS上面的这道题采用了不同的排列规则。通过观察可以发现，这个规则和斜线数k的奇偶性有关。只要进行一次简单的判断就可以让结果按照需要的规则进行排列了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 10071 Back to High School Physics</title>
      <link>https://xuanwo.org/2014/10/29/uva-10071-back-to-high-school-physics/</link>
      <pubDate>Wed, 29 Oct 2014 20:09:12 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/29/uva-10071-back-to-high-school-physics/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1012&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1012&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;很简单的一道水题，通过简单的计算就能得出最后的结果是2vt。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 10055  Hashmat the Brave Warrior</title>
      <link>https://xuanwo.org/2014/10/29/uva-10055-hashmat-the-brave-warrior/</link>
      <pubDate>Wed, 29 Oct 2014 13:24:02 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/29/uva-10055-hashmat-the-brave-warrior/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=996&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=996&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;AOAPC上的基础题，一个非常简单的求两个数之间的差，注意数据的范围，应当采用%lld。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 12325 Zombie&#39;s Treasure Chest</title>
      <link>https://xuanwo.org/2014/10/27/uva-12325-zombies-treasure-chest/</link>
      <pubDate>Mon, 27 Oct 2014 16:49:40 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/27/uva-12325-zombies-treasure-chest/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=3747&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=3747&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;本以为是一件非常简单的贪心，但是狂WA6发，完全不明白到底发生了什么。
一开始觉得是一个背包问题，只要直接计算性价比（价值/体积），然后优先选择性价比高的物品就可以了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 10976 Fractions Again?!</title>
      <link>https://xuanwo.org/2014/10/27/uva-10976-fractions-again/</link>
      <pubDate>Mon, 27 Oct 2014 16:13:36 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/27/uva-10976-fractions-again/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1917&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1917&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;直接暴力做，最多有n-1种可能，每种可能全都尝试一遍，看看能不能找到合适的解，定eps为1e-4，幸运1A。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UVa 11059 Maximum Product</title>
      <link>https://xuanwo.org/2014/10/27/uva-11059-maximum-product/</link>
      <pubDate>Mon, 27 Oct 2014 14:05:31 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/27/uva-11059-maximum-product/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=22&amp;amp;page=show_problem&amp;amp;problem=2000&#34;&gt;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=22&amp;amp;page=show_problem&amp;amp;problem=2000&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这道题卡了两个半小时，各种神体位卡数据。
最开始题意理解错误，认为是要求出最大的乘积，实际上应该是求最大的连续积。然后在for循环的开始和结束全都卡了很多次，卡long long，卡输出，卡边界条件，直到队友看不下去了来帮我看代码，才终于解脱= =。
天若了，真的太弱了- -，遇到这种坑特别多的题目，发挥就各种失常，这样可不行。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 2 A Winner</title>
      <link>https://xuanwo.org/2014/10/22/cf-2a/</link>
      <pubDate>Wed, 22 Oct 2014 15:06:04 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/22/cf-2a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/2/problem/A&#34;&gt;http://codeforces.com/contest/2/problem/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;真尼玛给俄式英语跪了= =，游戏规则中最关键的地方各种看不懂。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;If score is negative, this means that the player has lost in the round.`

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这句话一直看不懂，是不是只要为负就能直接出局？还是就算暂时是负的也是没有关系的，只要最后大于最后的M就可以？直到看到CF的多组样例之后才明白，应该是后面一种。
除了这个之外，好好地学习了一下STL中的map，vector和迭代器，感觉好厉害！涨姿势了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 1 C Ancient Berland Circus</title>
      <link>https://xuanwo.org/2014/10/21/cf-1c/</link>
      <pubDate>Tue, 21 Oct 2014 17:23:43 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/21/cf-1c/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/1/problem/C&#34;&gt;http://codeforces.com/contest/1/problem/C&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意很简单，就是给出一个正N边形的三个点，要求求出这个正N边形的最小面积。
然后就是我不停地逗的过程了= =，因为手滑，在计算3个角的时候，全都采用了反cos函数的方法求解，debug的时候一直以为是double精度的问题，直到看到这样下图，我才恍然大悟= =，可怜我的两个小时。
&lt;img src=&#34;https://xuanwo.org/imgs/exercise%2FCF-1C.png&#34; alt=&#34;示意图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 1 B Spreadsheets</title>
      <link>https://xuanwo.org/2014/10/21/cf-1b/</link>
      <pubDate>Tue, 21 Oct 2014 14:35:33 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/21/cf-1b/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/1/problem/B&#34;&gt;http://codeforces.com/contest/1/problem/B&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;大水题一道，不过我坑了很久，实在是代码功底太弱。
题意非常简单，给出两种表格的坐标体系，要你进行相互转化，本质上是一道26进制转化类的题目。
我遇到的坑基本上分为两类，一个是在判断当前输入的字符串属于何种类型，第二是在具体实现过程中的BUG。
首先，讲一讲判断的过程。我另外写了一个判断的函数，一开始想的比较简单，只要判断第二个是不是字符，就OK。挂在了Test 2，错误样例是&lt;code&gt;A1&lt;/code&gt;。然后就在思考，这两种坐标体系的根本不同到底在哪里。实际上，RXCY体系中一定有字符R和C，R和C之间必定会有一个数字。从这一点出发，重写了一遍judge函数，总算是搞定了问题。
其次，来看一下在具体的实现过程中的BUG。这一次挂在了Test 6，一个总共有1000个的输入= =，错误的样例是&lt;code&gt;R228C494&lt;/code&gt;和&lt;code&gt;R98C688&lt;/code&gt;。观察之后发现，问题出在进退位上，因为在A—Z的体系中，实际上是没有代表&amp;rsquo;0&amp;rsquo;这个字符的，所以，当R或者C坐标上出现整除的时候，就会发现本应出现&amp;rsquo;Z&amp;rsquo;的地方，出现了字符&amp;rsquo;@&amp;lsquo;。不过在挂了这么多发之后，偷懒直接进行了特判，当&amp;rsquo;Z&amp;rsquo;出现字符串末尾，也就是c%26==0时，直接指定它为&amp;rsquo;Z&amp;rsquo;；当Z出现在字符串最前方时，直接在输出中过滤。
然后= =，A了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeVS 1842 递归第一次</title>
      <link>https://xuanwo.org/2014/10/20/codevs-1842/</link>
      <pubDate>Mon, 20 Oct 2014 21:40:51 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/20/codevs-1842/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codevs.cn/problem/1842/&#34;&gt;http://codevs.cn/problem/1842/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;还是一道水题，不过卡了RE。研究之后发现，问题出在我的记忆化搜索上面，我的记忆化数组的下标出现了负值，所以出现了RE。后来想了想，通过加上一个最小负数的绝对值，使得出现的每一个x都是非负数，然后解决了这个问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeVS 1475 m进制转十进制</title>
      <link>https://xuanwo.org/2014/10/20/codevs-1475/</link>
      <pubDate>Mon, 20 Oct 2014 20:55:41 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/20/codevs-1475/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codevs.cn/problem/1475/&#34;&gt;http://codevs.cn/problem/1475/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;跟上一道题差不多- -，也是简单的写了一个循环，然后使用累积法计算十进制的值。不过有一个小小的坑，就是&amp;rsquo;A&amp;rsquo;字符的ANSI值不是&amp;rsquo;9&amp;rsquo;+1，而是&amp;rsquo;9&amp;rsquo;+7。为了省的麻烦，我还是采用了-&amp;lsquo;A&amp;rsquo;+10这样的方法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeVS 1474 十进制转m进制</title>
      <link>https://xuanwo.org/2014/10/20/codevs-1474/</link>
      <pubDate>Mon, 20 Oct 2014 20:18:02 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/20/codevs-1474/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codevs.cn/problem/1474/&#34;&gt;http://codevs.cn/problem/1474/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一开始就看到了下面的提示——可以使用反向取余法，然后就去百度了一下，结果没有发现什么有用的东西- -，然后坑爹的麦当劳的网络又一直连不上GoAgent，直接导致谷歌也上不去，然后就只能靠自己YY反向取余法到底是个什么玩意儿了。
题目自然是十分简单，给的数也不大，n&amp;lt;=100，暴力一点也是OK的。然后就联想到了计算机导论课上老师讲的进制转换的知识点。只要不停地使用n去除以m，余数作为当前位置上的数，商作为下一次运算的n参与循环。直到&lt;code&gt;n&amp;lt;m&lt;/code&gt;的时候停止。
不过有一个地方需要注意的是，通过这种方法求出来的char数组和答案正好是逆序的，需要将它转换过来。我记得学长有个奇特的技巧可以将字符串逆序输出= =，不过现在条件受限，自己写一个for循环吧。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeVS 3038 3n&#43;1问题</title>
      <link>https://xuanwo.org/2014/10/15/codevs-3038/</link>
      <pubDate>Wed, 15 Oct 2014 14:40:28 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/15/codevs-3038/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codevs.cn/problem/3038/&#34;&gt;http://codevs.cn/problem/3038/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;水题。
一个简单的递归，实际上有一个小小的Trick，因为题目中说明了到目前为止没有证明，所以返回值为-1的情况完全可以不用考虑。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeVS 1212 最大公约数</title>
      <link>https://xuanwo.org/2014/10/15/codevs-1212/</link>
      <pubDate>Wed, 15 Oct 2014 12:04:02 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/15/codevs-1212/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codevs.cn/problem/1212/&#34;&gt;http://codevs.cn/problem/1212/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;水题。
只要使用gcd递归就可以搞定。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Codeforces Beta Round 1 A Theatre Square</title>
      <link>https://xuanwo.org/2014/10/14/cf-1a/</link>
      <pubDate>Tue, 14 Oct 2014 17:00:08 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/14/cf-1a/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeforces.com/contest/1/problem/A&#34;&gt;http://codeforces.com/contest/1/problem/A&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;大水题一道。
只要求出每一边最大的块数就可以了。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1050 To the Max</title>
      <link>https://xuanwo.org/2014/10/07/poj-1050-to-the-max/</link>
      <pubDate>Tue, 07 Oct 2014 23:41:26 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/07/poj-1050-to-the-max/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1050&#34;&gt;http://poj.org/problem?id=1050&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意不难理解，在一个矩阵中寻找一个和最大的子矩阵，可以看作是一个二维的DP问题。不过受到时间的限制，太过暴力的程序显然是不行的，所以现在的问题在于，如何把一个二维的问题转化为一个一维的问题。小脑一动，我们可以想到可以将把矩阵的高度压缩为1之后，在进行一次简单的求最大子序列和就可以实现了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2479 Maximum sum</title>
      <link>https://xuanwo.org/2014/10/07/poj-2479-maximum-sum/</link>
      <pubDate>Tue, 07 Oct 2014 00:25:21 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/07/poj-2479-maximum-sum/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2479&#34;&gt;http://poj.org/problem?id=2479&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;因为超时卡了很久，不得不换了一种更加优越的方法。不过有点丑，有机会重写一次吧= =&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3624 Charm Bracelet</title>
      <link>https://xuanwo.org/2014/10/05/poj-3624-charm-bracelet/</link>
      <pubDate>Sun, 05 Oct 2014 10:52:48 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/10/05/poj-3624-charm-bracelet/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3624&#34;&gt;http://poj.org/problem?id=3624&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这道题拖了很久很久，一直没有搞定，对DP以及背包问题的理解，一直处在一个瓶颈之中，特别烦躁。
知道今天在比赛群里面问了学长，才发现是空间优化的问题，二维的记忆化数组会直接超出容量限制。想通了这一点后，优化就变得简单了。只要另外定义一个新的数组f[MAXN]，从M-&amp;gt;w[i]进行循环，最后的f[m]就是所要求的结果。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3069 Saruman&#39;s Army</title>
      <link>https://xuanwo.org/2014/08/25/poj-3069-sarumans-army/</link>
      <pubDate>Mon, 25 Aug 2014 09:31:30 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/25/poj-3069-sarumans-army/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3069&#34;&gt;http://poj.org/problem?id=3069&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;每一个点有自己的范围，要求所有的点都被覆盖。
一开始的解法就是贪心，从最左边开始考虑，距离这个点r以内的区域内一定要有被标记的点（包括自身），只要不断的叠加上去就OK。
后来自己想过另外一种解法，每个点的区域都进行标记，一旦两个点有重叠的部分，则意味着有一个点是多余的。不过计算之后感觉时间复杂度有点高，可能达到了O(N^3)的级别，就没有继续向下去。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3617 Best Cow Line</title>
      <link>https://xuanwo.org/2014/08/24/poj-3617-best-cow-line/</link>
      <pubDate>Sun, 24 Aug 2014 21:42:20 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/24/poj-3617-best-cow-line/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3617&#34;&gt;http://poj.org/problem?id=3617&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;根据题目中所描述的数据结构来构建一个字典序最小的字符串。
贪心算法：不断取S的开头和末尾中较小的一个字符添加到T的末尾。
特别的，当两个字符大小一样时，则需要比较下一个字符。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3414 Pots</title>
      <link>https://xuanwo.org/2014/08/24/poj-3414-pots/</link>
      <pubDate>Sun, 24 Aug 2014 21:11:39 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/24/poj-3414-pots/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3414&#34;&gt;http://poj.org/problem?id=3414&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;因为卡一道题然后整整两天没有做题目什么的太不科学了- -。
纠结的难点在于，我怎么样把实现操作的路径打印出来。事实上，标记全部的六种状态，然后在bfs的过程中，把每一个状态全都输出到一个数组中去，然后再进行输出。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1250 Tanning Salon</title>
      <link>https://xuanwo.org/2014/08/22/poj-1250-tanning-salon/</link>
      <pubDate>Fri, 22 Aug 2014 22:41:28 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-1250-tanning-salon/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1250&#34;&gt;http://poj.org/problem?id=1250&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;旅行者的问题，按照题目意思来就好。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2109 Power of Cryptography</title>
      <link>https://xuanwo.org/2014/08/22/poj-2109-power-of-cryptography/</link>
      <pubDate>Fri, 22 Aug 2014 22:32:28 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2109-power-of-cryptography/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2109&#34;&gt;http://poj.org/problem?id=2109&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;直接暴力求。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2328 Guessing Game</title>
      <link>https://xuanwo.org/2014/08/22/poj-2328-guessing-game/</link>
      <pubDate>Fri, 22 Aug 2014 22:28:14 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2328-guessing-game/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2328&#34;&gt;http://poj.org/problem?id=2328&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;猜数字游戏，还是比较熟悉的模型。
先确定一个正确数字，另一个人猜数字，然后回答猜测数字比正确数字是太高、太低还是正确。现在题中给定猜测的过程，让我们用程序验证这个猜测过程中，回答是否正确。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2363 Blocks</title>
      <link>https://xuanwo.org/2014/08/22/poj-2363-blocks/</link>
      <pubDate>Fri, 22 Aug 2014 22:21:48 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2363-blocks/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2363&#34;&gt;http://poj.org/problem?id=2363&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;直接暴力计算，没有啥算法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2459 Feed Accounting</title>
      <link>https://xuanwo.org/2014/08/22/poj-2459-feed-accounting/</link>
      <pubDate>Fri, 22 Aug 2014 22:12:13 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2459-feed-accounting/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2459&#34;&gt;http://poj.org/problem?id=2459&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;英文题- -，阅读理解很重要。
&amp;gt;
容我搬运一下大牛的翻译：
就是说有一个人，有F1公斤的草料，需要储存到一个空仓库中，但是不知道要从什么时候开始添加才能够保证，在第D天的时候还剩下F2公斤草料，因为这个人家附近后C头牛出没，他们会来偷吃草料，每头牛来偷吃草料的时间段不一样。如果牛过来吃草料的时候，草料就会少，且每头牛每天吃且仅吃1公斤/天/头。问，如果要保证第D天的时候会剩余下F2公斤草料，需要在哪一天的时候添加这F1公斤草料。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2470 Ambiguous permutations</title>
      <link>https://xuanwo.org/2014/08/22/poj-2470-ambiguous-permutations/</link>
      <pubDate>Fri, 22 Aug 2014 22:09:08 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2470-ambiguous-permutations/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=&#34;&gt;http://poj.org/problem?id=&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;对于一个有N个元素的队列，队列元素为[1,2,&amp;hellip;,N-1,N]，进行一次队列变换，当前队列“数字i的位置”将成为变换后队列的第i个元素的值（下标从1开始）。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2535 Very Simple Problem</title>
      <link>https://xuanwo.org/2014/08/22/poj-2535-very-simple-problem/</link>
      <pubDate>Fri, 22 Aug 2014 22:04:55 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2535-very-simple-problem/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2535&#34;&gt;http://poj.org/problem?id=2535&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;N个评委，P道题目，每个评委对每道题进行评分。对于单个评委来说，如果他评分中的最高分的题目被视为该评委认定的“最困难的题目”，他评分中的最低分的题目被视为该评委认定的“最简单的题目”。对于每一道题，如果没有评委评定为“最困难的题目”，且有超过半数（不等于）的评委评定为“最简单的题目”，则这就可以被认为是“非常简单的题目”。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2538 WERTYU</title>
      <link>https://xuanwo.org/2014/08/22/poj-2538-wertyu/</link>
      <pubDate>Fri, 22 Aug 2014 21:44:21 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2538-wertyu/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2538&#34;&gt;http://poj.org/problem?id=2538&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;键盘错位，分别一一对应即可。
&lt;strong&gt;做到这道题目的时候才想起来，想当年我把我们家的联想键盘拆了，装回去的时候加减号弄反了。。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2562 Primary Arithmetic</title>
      <link>https://xuanwo.org/2014/08/22/poj-2562-primary-arithmetic/</link>
      <pubDate>Fri, 22 Aug 2014 21:41:23 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2562-primary-arithmetic/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2562&#34;&gt;http://poj.org/problem?id=2562&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;高精度的模拟加法进位，数组模拟之。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2575 Jolly Jumpers</title>
      <link>https://xuanwo.org/2014/08/22/poj-2575-jolly-jumpers/</link>
      <pubDate>Fri, 22 Aug 2014 21:37:59 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2575-jolly-jumpers/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2575&#34;&gt;http://poj.org/problem?id=2575&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;又是一道已经A过的题目，咦，都是什么时候做的啊？&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2579 Blurred Vision</title>
      <link>https://xuanwo.org/2014/08/22/poj-2579-blurred-vision/</link>
      <pubDate>Fri, 22 Aug 2014 21:35:15 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2579-blurred-vision/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2579&#34;&gt;http://poj.org/problem?id=2579&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;对于一个R*C的矩阵，输出矩阵中每一个2*2的小方格四个值的平均值（向下取整）。
挨个遍历即可，注意边界。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2636 Electrical Outlets</title>
      <link>https://xuanwo.org/2014/08/22/poj-2636-electrical-outlets/</link>
      <pubDate>Fri, 22 Aug 2014 21:32:53 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2636-electrical-outlets/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2636&#34;&gt;http://poj.org/problem?id=2636&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;今天做的时候发现&lt;code&gt;2636.cpp&lt;/code&gt;文件已经存在了，有点神奇= =，改了一下头文件，直接提交了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2664 Prerequisites?</title>
      <link>https://xuanwo.org/2014/08/22/poj-2664-prerequisites/</link>
      <pubDate>Fri, 22 Aug 2014 21:30:44 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2664-prerequisites/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=&#34;&gt;http://poj.org/problem?id=&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;将已经选择的课程标记下来，然后对于每一个类别分别进行验证是否已经符合了要求。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3006 Dirichlet&#39;s Theorem on Arithmetic Progressions</title>
      <link>https://xuanwo.org/2014/08/22/poj-3006-dirichlets-theorem-on-arithmetic-progressions/</link>
      <pubDate>Fri, 22 Aug 2014 18:13:27 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-3006-dirichlets-theorem-on-arithmetic-progressions/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3006&#34;&gt;http://poj.org/problem?id=3006&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;筛法打素数表，然后暴力得到这些数字，判断是否为素数，若是则次数times+1,直到得到第n个素数。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3077 Rounders</title>
      <link>https://xuanwo.org/2014/08/22/poj-3077-rounders/</link>
      <pubDate>Fri, 22 Aug 2014 17:52:36 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-3077-rounders/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3077&#34;&gt;http://poj.org/problem?id=3077&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;咦，居然又碰到一道高精度的题目，Java水过。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3183 Stump Removal</title>
      <link>https://xuanwo.org/2014/08/22/poj-3183-stump-removal/</link>
      <pubDate>Fri, 22 Aug 2014 17:31:04 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-3183-stump-removal/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3183&#34;&gt;http://poj.org/problem?id=3183&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;只要找到比两边大的小高峰即可，注意特殊情况的判断，比如在最开始和最后面。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3300 Tour de France</title>
      <link>https://xuanwo.org/2014/08/22/poj-3300-tour-de-france/</link>
      <pubDate>Fri, 22 Aug 2014 17:24:38 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-3300-tour-de-france/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3300&#34;&gt;http://poj.org/problem?id=3300&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;好多轮子= =。
计算前后轮的齿轮比，再进行排序，找到前一种比后一种最大的那个。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3302 Subsequence</title>
      <link>https://xuanwo.org/2014/08/22/poj-3302-subsequence/</link>
      <pubDate>Fri, 22 Aug 2014 17:21:34 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-3302-subsequence/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3302&#34;&gt;http://poj.org/problem?id=3302&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;直接用一个循环，遍历str1，与str2进行单字符匹配，如果匹配成功就count++。
如果count==strlen(str1),则输出YES，遍历正序、逆序各一次，都没有则输出NO。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3325 ICPC Score Totalizer Software</title>
      <link>https://xuanwo.org/2014/08/22/poj-3325-icpc-score-totalizer-software/</link>
      <pubDate>Fri, 22 Aug 2014 17:18:27 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-3325-icpc-score-totalizer-software/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3325&#34;&gt;http://poj.org/problem?id=3325&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;去掉一个最高分，一个最低分，求平均值。
&lt;strong&gt;小学的时候经常做这样的题目- -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2251 Dungeon Master</title>
      <link>https://xuanwo.org/2014/08/22/poj-2251-dungeon-master/</link>
      <pubDate>Fri, 22 Aug 2014 09:23:20 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/22/poj-2251-dungeon-master/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2251&#34;&gt;http://poj.org/problem?id=2251&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;拖了好久的三维BFS题。天真的觉得pair类可以直接扩展到三维中去，结果编译器直接报了错，可惜了那么多的代码，全都要推倒重来了。借鉴了某个神牛的写法，特别是在输入上面，顿时感觉以前的处理方法姿势太不优美了。做这类题目的时候，经常有一个困扰就是我的记步器如何实现，从前都是单独设一个steps这样的变量，现在看来，每一个点设一个可能更好理解一点。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3982 序列</title>
      <link>https://xuanwo.org/2014/08/21/poj-3982-sequence/</link>
      <pubDate>Thu, 21 Aug 2014 23:47:20 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3982-sequence/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3982&#34;&gt;http://poj.org/problem?id=3982&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意非常清晰，唯一的问题在于大数的实现。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3979 分数加减法</title>
      <link>https://xuanwo.org/2014/08/21/poj-3979-divides-plus-and-minus/</link>
      <pubDate>Thu, 21 Aug 2014 23:37:02 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3979-divides-plus-and-minus/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3979&#34;&gt;http://poj.org/problem?id=3979&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;简单的分数问题，注意上下约分。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3980 取模运算</title>
      <link>https://xuanwo.org/2014/08/21/poj-3980-mod/</link>
      <pubDate>Thu, 21 Aug 2014 23:31:30 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3980-mod/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3980&#34;&gt;http://poj.org/problem?id=3980&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给定两个数，求他们的模。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3750 小孩报数问题</title>
      <link>https://xuanwo.org/2014/08/21/poj-3750-kid-counting/</link>
      <pubDate>Thu, 21 Aug 2014 22:26:15 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3750-kid-counting/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3750&#34;&gt;http://poj.org/problem?id=3750&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;中文题- -，用队列来搞定～&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3749 破译密码</title>
      <link>https://xuanwo.org/2014/08/21/poj-3749-break-password/</link>
      <pubDate>Thu, 21 Aug 2014 22:08:38 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3749-break-password/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3749&#34;&gt;http://poj.org/problem?id=3749&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;将一个字符串按照一定的规则转化，中文题，不多说了。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3673 Cow Multiplication</title>
      <link>https://xuanwo.org/2014/08/21/poj-3673-cow-multiplication/</link>
      <pubDate>Thu, 21 Aug 2014 21:59:04 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3673-cow-multiplication/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3673&#34;&gt;http://poj.org/problem?id=3673&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;按照题意初始化，并运算即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3196 Babylonian Roulette</title>
      <link>https://xuanwo.org/2014/08/21/poj-3196-babylonian-roulette/</link>
      <pubDate>Thu, 21 Aug 2014 20:02:37 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3196-babylonian-roulette/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3196&#34;&gt;http://poj.org/problem?id=3196&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;好长的题目- -，是一个关于赌博的问题。给你三个数pot，bet，fpot，分别代表初始金额，赌注金额，封盘金额，每次加钱可能是赌注的-1，-2，-3，1，2，3倍，求最少多少次可以到达封盘金额。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3125 Printer Queue</title>
      <link>https://xuanwo.org/2014/08/21/poj-3125-printer-queue/</link>
      <pubDate>Thu, 21 Aug 2014 19:43:07 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3125-printer-queue/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3125&#34;&gt;http://poj.org/problem?id=3125&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;打印队列，看名字都感觉是队列的经典应用，不过没有使用STL，而是模拟了一个。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3104 Drying</title>
      <link>https://xuanwo.org/2014/08/21/poj-3104-drying/</link>
      <pubDate>Thu, 21 Aug 2014 19:23:22 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3104-drying/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3104&#34;&gt;http://poj.org/problem?id=3104&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;感觉是一道模拟的题目，使用二分来优化时间。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3157 Java vs C&#43;&#43;</title>
      <link>https://xuanwo.org/2014/08/21/poj-3157-java-vs-c&#43;&#43;/</link>
      <pubDate>Thu, 21 Aug 2014 19:16:49 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3157-java-vs-c&#43;&#43;/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3157&#34;&gt;http://poj.org/problem?id=3157&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这是我们在周赛上面做过的题目，WA了无数发，深感自己智商不够——我把input和output里面的&lt;code&gt;sample input #1&lt;/code&gt;也处理进去了，每个结果都跟一个&lt;code&gt;sample output #1&lt;/code&gt;，能A就有鬼了。看了discuss之后，真恨不得抽自己嘴巴子。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3117 World Cup</title>
      <link>https://xuanwo.org/2014/08/21/poj-3117-world-cup/</link>
      <pubDate>Thu, 21 Aug 2014 18:47:38 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3117-world-cup/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3117&#34;&gt;http://poj.org/problem?id=3117&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;如果所有的队伍作为一个整体，有胜负的比赛总分+3分，如果是平局总分+2分。所以平局数量是：所有比赛均有胜负的总分减去当前总分的分值，即：3 * N - SUM。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3173 Parkside&#39;s Triangle</title>
      <link>https://xuanwo.org/2014/08/21/poj-3173-parksides-triangle/</link>
      <pubDate>Thu, 21 Aug 2014 18:40:11 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3173-parksides-triangle/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3173&#34;&gt;http://poj.org/problem?id=3173&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;生成这样一个表并不难，但是需要注意格式的控制。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3100 Root of the Problem</title>
      <link>https://xuanwo.org/2014/08/21/poj-3100-root-of-the-problem/</link>
      <pubDate>Thu, 21 Aug 2014 18:36:21 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3100-root-of-the-problem/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3100&#34;&gt;http://poj.org/problem?id=3100&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给定B，N，求出，最接近B的N次方根的整数。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3176 Cow Bowling</title>
      <link>https://xuanwo.org/2014/08/21/poj-3176-cow-bowling/</link>
      <pubDate>Thu, 21 Aug 2014 18:30:38 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3176-cow-bowling/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3176&#34;&gt;http://poj.org/problem?id=3176&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;简单的DP，状态转移方程为：f[i][j]=w[i][j]+max(f[i+1][j],f[i+1][j+1]);&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3085 Quick Change</title>
      <link>https://xuanwo.org/2014/08/21/poj-3085-quick-change/</link>
      <pubDate>Thu, 21 Aug 2014 18:28:06 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3085-quick-change/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3085&#34;&gt;http://poj.org/problem?id=3085&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;找零钱，使用贪心来做～&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3086 Triangular Sums</title>
      <link>https://xuanwo.org/2014/08/21/poj-3086-triangular-sums/</link>
      <pubDate>Thu, 21 Aug 2014 10:06:22 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3086-triangular-sums/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3086&#34;&gt;http://poj.org/problem?id=3086&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;三角数求和，打表输出。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3062 Celebrity jeopardy</title>
      <link>https://xuanwo.org/2014/08/21/poj-3062-celebrity-jeopardy/</link>
      <pubDate>Thu, 21 Aug 2014 10:00:09 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3062-celebrity-jeopardy/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3062&#34;&gt;http://poj.org/problem?id=3062&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;我对这个充满恶意的世界感到了深深的绝望TnT。原样输出之。。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3030 Nasty Hacks</title>
      <link>https://xuanwo.org/2014/08/21/poj-3030-nasty-hacks/</link>
      <pubDate>Thu, 21 Aug 2014 09:57:23 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3030-nasty-hacks/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3030&#34;&gt;http://poj.org/problem?id=3030&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;输入三个数，分别代表不做广告的效果、做广告的效果、做广告的花销，输出决定。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3094 Quicksum</title>
      <link>https://xuanwo.org/2014/08/21/poj-3094-quicksum/</link>
      <pubDate>Thu, 21 Aug 2014 09:54:26 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-3094-quicksum/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3094&#34;&gt;http://poj.org/problem?id=3094&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;对字母按照顺序求和，大水题，记得数组开大一点。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2992 Divisors</title>
      <link>https://xuanwo.org/2014/08/21/poj-2992-divisors/</link>
      <pubDate>Thu, 21 Aug 2014 09:49:58 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-2992-divisors/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2992&#34;&gt;http://poj.org/problem?id=2992&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目的意思还是比较简单的：输入C(n,k), 求该数的因数个数。
然后我们又知道（谷歌又知道）：对于任意质数p, n!中有（n/p+n/p^2+n/p^3+&amp;hellip;)个质因子p。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2904 Gauß in Elementary School</title>
      <link>https://xuanwo.org/2014/08/21/poj-2904-gau%C3%9F-in-elementary-school/</link>
      <pubDate>Thu, 21 Aug 2014 09:43:27 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-2904-gau%C3%9F-in-elementary-school/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2904&#34;&gt;http://poj.org/problem?id=2904&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;求从n到m的所有元素之和。
不过很多人都告诉我POJ上面交用到&lt;code&gt;long long int&lt;/code&gt;的题必须使用&lt;code&gt;I64d&lt;/code&gt;，变量类型也必须是&lt;code&gt;__int64&lt;/code&gt;。但是我用&lt;code&gt;long long int&lt;/code&gt;和&lt;code&gt;%lld&lt;/code&gt;也能过啊，是因为POJ更新了么？&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2909 Goldbach&#39;s Conjecture</title>
      <link>https://xuanwo.org/2014/08/21/poj-2909-goldbachs-conjecture/</link>
      <pubDate>Thu, 21 Aug 2014 09:40:06 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/21/poj-2909-goldbachs-conjecture/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2909&#34;&gt;http://poj.org/problem?id=2909&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;筛法打素数表，用来验证哥德巴赫猜想。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3083 Children of the Candy Corn</title>
      <link>https://xuanwo.org/2014/08/19/poj-3083-children-of-the-candy-corn/</link>
      <pubDate>Tue, 19 Aug 2014 16:58:57 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/19/poj-3083-children-of-the-candy-corn/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3083&#34;&gt;http://poj.org/problem?id=3083&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;最开始的代码程序直接报错，反复调试之后，发现我陷入了无限的循环之中。因为先写的左转优先的代码，面对这样的数据时：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;########
#......#
#.####.#
#.####.#
#.####.#
#.####.#
#...#..#  //此行倒数第二和第三的`.`会使得左转优先策略陷入无限循环
#S#E####

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此，仅仅是写DFS是不够的，我还需要对当前的朝向再进行判断。
除了这个之外，就是一个BFS了，最短路径用DFS不太合适。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2876 Cantoring Along</title>
      <link>https://xuanwo.org/2014/08/18/poj-2876-cantoring-along/</link>
      <pubDate>Mon, 18 Aug 2014 23:19:45 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-2876-cantoring-along/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2876&#34;&gt;http://poj.org/problem?id=2876&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;按照指定格式输出字符串，递归求解。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2864 Pascal Library</title>
      <link>https://xuanwo.org/2014/08/18/poj-2864-pascal-library/</link>
      <pubDate>Mon, 18 Aug 2014 22:57:52 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-2864-pascal-library/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2864&#34;&gt;http://poj.org/problem?id=2864&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;统计出现1的个数，如果个数等于列数，就输出yes，否则输出no。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2853 Sequence Sum Possibilities</title>
      <link>https://xuanwo.org/2014/08/18/poj-2853-sequence-sum-possibilities/</link>
      <pubDate>Mon, 18 Aug 2014 22:42:34 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-2853-sequence-sum-possibilities/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2853&#34;&gt;http://poj.org/problem?id=2853&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;因式分解，输出能用题目中的要求输出的组合的数目。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2871 A Simple Question of Chemistry</title>
      <link>https://xuanwo.org/2014/08/18/poj-2871-a-simple-question-of-chemistry/</link>
      <pubDate>Mon, 18 Aug 2014 22:39:35 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-2871-a-simple-question-of-chemistry/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2871&#34;&gt;http://poj.org/problem?id=2871&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给一列数，从第二个数开始，输出其与上一个数字之差，输出取两位小数，输入以“999”数字结束。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2591 Set Definition</title>
      <link>https://xuanwo.org/2014/08/18/poj-2591-set-definition/</link>
      <pubDate>Mon, 18 Aug 2014 22:35:08 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-2591-set-definition/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2591&#34;&gt;http://poj.org/problem?id=2591&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;运用了递归的思想，不过没有另外使用函数来调用。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2593 Max Sequence</title>
      <link>https://xuanwo.org/2014/08/18/poj-2593-max-sequence/</link>
      <pubDate>Mon, 18 Aug 2014 22:30:24 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-2593-max-sequence/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2593&#34;&gt;http://poj.org/problem?id=2593&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;贪心法求最大最序列和，但是注意下时间。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1700 Crossing River</title>
      <link>https://xuanwo.org/2014/08/18/poj-1700-crossing-river/</link>
      <pubDate>Mon, 18 Aug 2014 22:27:39 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-1700-crossing-river/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1700&#34;&gt;http://poj.org/problem?id=1700&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;-，小学时候做的智力题啊，贪心法，&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3720 Occurrence of Digits</title>
      <link>https://xuanwo.org/2014/08/18/poj-3720-occurrence-of-digits/</link>
      <pubDate>Mon, 18 Aug 2014 22:23:53 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-3720-occurrence-of-digits/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3720&#34;&gt;http://poj.org/problem?id=3720&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给定n，k，求出1/2 , 1/n之间所有分数的循环小数表达式中数字k的出现次数，简单的模拟就行了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3219 二项式系数</title>
      <link>https://xuanwo.org/2014/08/18/poj-3219-binomial-coefficient/</link>
      <pubDate>Mon, 18 Aug 2014 22:18:58 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-3219-binomial-coefficient/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3219&#34;&gt;http://poj.org/problem?id=3219&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;跪拜大神的神思路，还有二进制的神奇用法。
&amp;gt;
C(n,k)(k&amp;lt;=n)的奇偶性取决于(n-k)与k的二进制表达式是否存在同一位上的两个数码均为1，若存在，则为偶数，反之为奇数。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3224 Lab杯</title>
      <link>https://xuanwo.org/2014/08/18/poj-3224-lab-cup/</link>
      <pubDate>Mon, 18 Aug 2014 22:15:49 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-3224-lab-cup/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3224&#34;&gt;http://poj.org/problem?id=3224&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;直接每行取分，如果是3分就+1，比较出获得3分最多的人，输出号码。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3737 UmBasketella</title>
      <link>https://xuanwo.org/2014/08/18/poj-3737-umbasketella/</link>
      <pubDate>Mon, 18 Aug 2014 22:12:24 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-3737-umbasketella/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3737&#34;&gt;http://poj.org/problem?id=3737&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;几何的题目，立体几何的公式用起来。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2840 Big Clock</title>
      <link>https://xuanwo.org/2014/08/18/poj-2840-big-clock/</link>
      <pubDate>Mon, 18 Aug 2014 22:08:11 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-2840-big-clock/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2840&#34;&gt;http://poj.org/problem?id=2840&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;很有意思的题目，求解大本钟敲几下的问题，按照规律来。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2707 Copier Reduction</title>
      <link>https://xuanwo.org/2014/08/18/poj-2707-copier-reduction/</link>
      <pubDate>Mon, 18 Aug 2014 22:05:01 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-2707-copier-reduction/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2707&#34;&gt;http://poj.org/problem?id=2707&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;纯英文题，题目读懂就会做，注意int和float的区别。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2719 Faulty Odometer</title>
      <link>https://xuanwo.org/2014/08/18/poj-2719-faulty-odometer/</link>
      <pubDate>Mon, 18 Aug 2014 22:01:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-2719-faulty-odometer/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2719&#34;&gt;http://poj.org/problem?id=2719&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一语惊醒梦中人啊- -，九进制就OK。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3278 Catch That Cow</title>
      <link>https://xuanwo.org/2014/08/18/poj-3278-catch-that-cow/</link>
      <pubDate>Mon, 18 Aug 2014 17:00:55 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/18/poj-3278-catch-that-cow/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3278&#34;&gt;http://poj.org/problem?id=3278&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;BFS最基础的应用，只有三个方向，一个是乘二，一个是加一，一个是减一。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2696 A Mysterious Function</title>
      <link>https://xuanwo.org/2014/08/17/poj-2696-a-mysterious-function/</link>
      <pubDate>Sun, 17 Aug 2014 23:52:44 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2696-a-mysterious-function/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2696&#34;&gt;http://poj.org/problem?id=2696&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;套公式计算，水题，但是注意数组的大小。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2601 Simple calculations</title>
      <link>https://xuanwo.org/2014/08/17/poj-2601-simple-calculations/</link>
      <pubDate>Sun, 17 Aug 2014 23:49:14 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2601-simple-calculations/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2601&#34;&gt;http://poj.org/problem?id=2601&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;推公式。满眼都是泪，不多说了= =。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2665 Trees</title>
      <link>https://xuanwo.org/2014/08/17/poj-2665-trees/</link>
      <pubDate>Sun, 17 Aug 2014 23:42:32 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2665-trees/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2665&#34;&gt;http://poj.org/problem?id=2665&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;用一个unsigned int储存总数，然后每次对于区间减去需要移除的数量，最后求值。
&lt;em&gt;记得POJ上也有这道题，当年好象是用标记01的方法来做的。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2606 Rabbit hunt</title>
      <link>https://xuanwo.org/2014/08/17/poj-2606-rabbit-hunt/</link>
      <pubDate>Sun, 17 Aug 2014 16:50:58 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2606-rabbit-hunt/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2606&#34;&gt;http://poj.org/problem?id=2606&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;与之前做过的题目几乎一模一样，只是结束条件不同。同样是计算每一个点的斜率，存在数组中，再排序。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1118 Lining Up</title>
      <link>https://xuanwo.org/2014/08/17/poj-1118-lining-up/</link>
      <pubDate>Sun, 17 Aug 2014 16:47:52 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-1118-lining-up/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1118&#34;&gt;http://poj.org/problem?id=1118&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;暴力过，求出所有点的斜率并存在一个数组中，再进行比较。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2623 Sequence Median</title>
      <link>https://xuanwo.org/2014/08/17/poj-2623-sequence-median/</link>
      <pubDate>Sun, 17 Aug 2014 16:44:10 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2623-sequence-median/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2623&#34;&gt;http://poj.org/problem?id=2623&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;快速排序的简单应用，注意最后的输出格式。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2608 Soundex</title>
      <link>https://xuanwo.org/2014/08/17/poj-2608-soundex/</link>
      <pubDate>Sun, 17 Aug 2014 16:36:16 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2608-soundex/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2608&#34;&gt;http://poj.org/problem?id=2608&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;输出字符串所对应的值，没有的话，就不输出。不过现在有点后悔，是不是用Map来做会更好一些。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2602 Superlong sums</title>
      <link>https://xuanwo.org/2014/08/17/poj-2602-superlong-sums/</link>
      <pubDate>Sun, 17 Aug 2014 16:33:30 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2602-superlong-sums/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2602&#34;&gt;http://poj.org/problem?id=2602&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;发现开辟一个字符数组，在输入的过程中处理数据。比较简单的大数加法，没有使用Java。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2656 Unhappy Jinjin</title>
      <link>https://xuanwo.org/2014/08/17/poj-2656-unhappy-jinjin/</link>
      <pubDate>Sun, 17 Aug 2014 16:29:05 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2656-unhappy-jinjin/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2656&#34;&gt;http://poj.org/problem?id=2656&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;在我们学校自己的OJ好像做过一样的题目，恩，一道水题，求学习时间最长的一天。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2578 Keep on Truckin&#39;</title>
      <link>https://xuanwo.org/2014/08/17/poj-2578-keep-on-truckin/</link>
      <pubDate>Sun, 17 Aug 2014 16:24:37 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2578-keep-on-truckin/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2578&#34;&gt;http://poj.org/problem?id=2578&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给三个数字，从左到右，看哪个数字先大于168，直到得到一个大于168的数，之前的数全都输出&amp;rdquo;Crash&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2551 Ones</title>
      <link>https://xuanwo.org/2014/08/17/poj-2551-ones/</link>
      <pubDate>Sun, 17 Aug 2014 16:17:59 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2551-ones/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2551&#34;&gt;http://poj.org/problem?id=2551&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;将一个数取下来，然后从1对n本身取模（%），之后将取模之后的数字乘以10加1，再取模，直到取模为0。
比如当n=3时，变化的情况是这样的：3-&amp;gt;31(余1)-&amp;gt;311(余1)-&amp;gt;3111(整除)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2521 How much did the businessman lose</title>
      <link>https://xuanwo.org/2014/08/17/poj-2521-how-much-did-the-businessman-lose/</link>
      <pubDate>Sun, 17 Aug 2014 16:14:20 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2521-how-much-did-the-businessman-lose/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2521&#34;&gt;http://poj.org/problem?id=2521&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;小学的时候经常做的题目啊，只要保持头脑清醒，计算出交易过程中因为假币损失的钱。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2509 Peter&#39;s smokes</title>
      <link>https://xuanwo.org/2014/08/17/poj-2509-peters-smokes/</link>
      <pubDate>Sun, 17 Aug 2014 16:08:27 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/17/poj-2509-peters-smokes/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2509&#34;&gt;http://poj.org/problem?id=2509&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;模拟每个人吸烟的过程即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2503 Babelfish</title>
      <link>https://xuanwo.org/2014/08/16/poj-2503-babelfish/</link>
      <pubDate>Sat, 16 Aug 2014 23:41:45 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2503-babelfish/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2503&#34;&gt;http://poj.org/problem?id=2503&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;STL里面Map的运用，分别建立映射就好，不难。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2453 An Easy Problem</title>
      <link>https://xuanwo.org/2014/08/16/poj-2453-an-easy-problem/</link>
      <pubDate>Sat, 16 Aug 2014 23:36:24 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2453-an-easy-problem/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2453&#34;&gt;http://poj.org/problem?id=2453&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;位运算碉堡了，着实强大。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2478 Farey Sequence</title>
      <link>https://xuanwo.org/2014/08/16/poj-2478-farey-sequence/</link>
      <pubDate>Sat, 16 Aug 2014 23:33:37 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2478-farey-sequence/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2478&#34;&gt;http://poj.org/problem?id=2478&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;欧拉函数的运用，套用了模板。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2407 Relatives</title>
      <link>https://xuanwo.org/2014/08/16/poj-2407-relatives/</link>
      <pubDate>Sat, 16 Aug 2014 22:04:50 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2407-relatives/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2407&#34;&gt;http://poj.org/problem?id=2407&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;套用欧拉公式，其实不懂= =。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2498 StuPId</title>
      <link>https://xuanwo.org/2014/08/16/poj-2498-stupid/</link>
      <pubDate>Sat, 16 Aug 2014 16:12:54 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2498-stupid/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2498&#34;&gt;http://poj.org/problem?id=2498&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;英文题= =。按照{9,3,7}的顺序，从后往前乘，最后的乘积相加可以被十整除。但是有一个数字看不清了，要求计算出那个数字，并且输出整个数。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2371 Questions and answers</title>
      <link>https://xuanwo.org/2014/08/16/poj-2371-questions-and-answers/</link>
      <pubDate>Sat, 16 Aug 2014 15:35:31 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2371-questions-and-answers/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2371&#34;&gt;http://poj.org/problem?id=2371&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;排序题，输出制定的i-th的数。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2350 Above Average</title>
      <link>https://xuanwo.org/2014/08/16/poj-2350-above-average/</link>
      <pubDate>Sat, 16 Aug 2014 15:23:55 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2350-above-average/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2350&#34;&gt;http://poj.org/problem?id=2350&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;成绩高于平均成绩的百分比，数据不大，直接暴力做。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2301 Beat the Spread!</title>
      <link>https://xuanwo.org/2014/08/16/poj-2301-beat-the-spread/</link>
      <pubDate>Sat, 16 Aug 2014 15:19:47 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2301-beat-the-spread/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2301&#34;&gt;http://poj.org/problem?id=2301&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给定两数之和以及两数之差，求解这两个数，并且要求大数先输出。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2390 Bank Interest</title>
      <link>https://xuanwo.org/2014/08/16/poj-2390-bank-interest/</link>
      <pubDate>Sat, 16 Aug 2014 15:15:33 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2390-bank-interest/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2390&#34;&gt;http://poj.org/problem?id=2390&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给定年利率，本金和存款年数，求解到期之后的本息和。找自信专用。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2388 Who&#39;s in the Middle</title>
      <link>https://xuanwo.org/2014/08/16/poj-2388-whos-in-the-middle/</link>
      <pubDate>Sat, 16 Aug 2014 15:12:33 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2388-whos-in-the-middle/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2388&#34;&gt;http://poj.org/problem?id=2388&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;纯排序题，直接用sort水过。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2229 Sumsets</title>
      <link>https://xuanwo.org/2014/08/16/poj-2229-sumsets/</link>
      <pubDate>Sat, 16 Aug 2014 15:05:56 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2229-sumsets/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2229&#34;&gt;http://poj.org/problem?id=2229&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;比较简单的DP：
当n为奇数时，有dp[n] = dp[n-1]
当n为偶数时，可以根据1的存在与否分成两种情况：
1. 有1，则有dp[n]的一部分是dp[n-2]
2. 没有1，则有dp[n]的另一部分是d[n/2]&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2249 Binomial Showdown</title>
      <link>https://xuanwo.org/2014/08/16/poj-2249-binomial-showdown/</link>
      <pubDate>Sat, 16 Aug 2014 14:59:02 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2249-binomial-showdown/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2249&#34;&gt;http://poj.org/problem?id=2249&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;求二项式，直接使用二项式定理～&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2231 Moo Volume</title>
      <link>https://xuanwo.org/2014/08/16/poj-2231-moo-volume/</link>
      <pubDate>Sat, 16 Aug 2014 14:52:02 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2231-moo-volume/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2231&#34;&gt;http://poj.org/problem?id=2231&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;打表找规律，排序之后发现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1     2     3     4     5

0     1     2     3     4
1     0     1     2     3
2     1     0     1     2
3     2     1     0     1
4     3     2     1     0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把下面矩阵的所有数字相加就是所求的结果。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2262 Goldbach&#39;s Conjecture</title>
      <link>https://xuanwo.org/2014/08/16/poj-2262-goldbachs-conjecture/</link>
      <pubDate>Sat, 16 Aug 2014 14:46:12 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2262-goldbachs-conjecture/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2262&#34;&gt;http://poj.org/problem?id=2262&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;给定大于6的偶数X，求满足X=a+b且|a-b|最大的那对，直接暴力做，事实上，找到的第一对就是满足条件的那对。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2196 Specialized Four-Digit Numbers</title>
      <link>https://xuanwo.org/2014/08/16/poj-2196-specialized-four-digit-numbers/</link>
      <pubDate>Sat, 16 Aug 2014 14:41:33 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2196-specialized-four-digit-numbers/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2196&#34;&gt;http://poj.org/problem?id=2196&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;直接暴力做，逐个判断是不是符合条件。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2192 Zipper</title>
      <link>https://xuanwo.org/2014/08/16/poj-2192-zipper/</link>
      <pubDate>Sat, 16 Aug 2014 14:35:52 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2192-zipper/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2192&#34;&gt;http://poj.org/problem?id=2192&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;动态规划的核心方程：b.dp[i][j-1]==1&amp;amp;&amp;amp;str2[j-1]==str3[i+j-1]&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2190 ISBN</title>
      <link>https://xuanwo.org/2014/08/16/poj-2190-isbn/</link>
      <pubDate>Sat, 16 Aug 2014 14:25:01 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2190-isbn/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2190&#34;&gt;http://poj.org/problem?id=2190&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目不难，只需求解给定一个数为ISBN数十，？上那个数字代表的是几。需要考虑的一些特殊情况：
1. 无解的时候，输出-1
2. 末尾数为10的时候，输出X
3. 如果结果没有修改，要直接初始化为-1&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2141 Message Decowding</title>
      <link>https://xuanwo.org/2014/08/16/poj-2141-message-decowding/</link>
      <pubDate>Sat, 16 Aug 2014 00:50:06 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2141-message-decowding/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2141&#34;&gt;http://poj.org/problem?id=2141&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;简单的密码转换，注意输出，要以大写字母输出。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2316 SPIN</title>
      <link>https://xuanwo.org/2014/08/16/poj-2316-spin/</link>
      <pubDate>Sat, 16 Aug 2014 00:40:30 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2316-spin/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2316&#34;&gt;http://poj.org/problem?id=2316&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;所有数据相加，再对10取模，因为每个字符串的长度都是相同的～&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2136 Vertical Histogram</title>
      <link>https://xuanwo.org/2014/08/16/poj-2136-vertical-histogram/</link>
      <pubDate>Sat, 16 Aug 2014 00:37:49 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2136-vertical-histogram/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2136&#34;&gt;http://poj.org/problem?id=2136&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目不难，但是最后的输出各种蛋疼，慢慢调试吧。。。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2140 Herd Sums</title>
      <link>https://xuanwo.org/2014/08/16/poj-2140-herd-sums/</link>
      <pubDate>Sat, 16 Aug 2014 00:28:06 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2140-herd-sums/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2140&#34;&gt;http://poj.org/problem?id=2140&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;很有意思的一道题，很显然，i不会超过n/2。
如果是奇数，我只要考虑最中间的两个数；如果是奇数，我只要在上面计算的结果上再加1。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2105 IP Address</title>
      <link>https://xuanwo.org/2014/08/16/poj-2105-ip-address/</link>
      <pubDate>Sat, 16 Aug 2014 00:24:31 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2105-ip-address/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2105&#34;&gt;http://poj.org/problem?id=2105&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;将表示IP地址的二位数转换成十进制并且分段，使用字符数组即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2070 Filling Out the Team</title>
      <link>https://xuanwo.org/2014/08/16/poj-2070-filling-out-the-team/</link>
      <pubDate>Sat, 16 Aug 2014 00:19:37 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2070-filling-out-the-team/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2070&#34;&gt;http://poj.org/problem?id=2070&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;简单的计算题，理解题意之后，就是比较一下浮点数的值。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2002 Squares</title>
      <link>https://xuanwo.org/2014/08/16/poj-2002-squares/</link>
      <pubDate>Sat, 16 Aug 2014 00:15:45 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2002-squares/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2002&#34;&gt;http://poj.org/problem?id=2002&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;排序之后使用二分搜索，用向量旋转的方法来确定是否可以构成正方形。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2027 No Brainer</title>
      <link>https://xuanwo.org/2014/08/16/poj-2027-no-brainer/</link>
      <pubDate>Sat, 16 Aug 2014 00:11:09 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/16/poj-2027-no-brainer/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2027&#34;&gt;http://poj.org/problem?id=2027&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;超级大水题= =，比较一下X和Y的大小。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1781 In Danger</title>
      <link>https://xuanwo.org/2014/08/15/poj-1781-in-danger/</link>
      <pubDate>Fri, 15 Aug 2014 20:46:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/15/poj-1781-in-danger/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1781&#34;&gt;http://poj.org/problem?id=1781&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;同样的，打表找规律，发现当n是2的次方幂时，结果都是1；当n不是2的次方幂时，结果是与比n大的最小的2的次方幂的差值的两倍。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3372 Candy Distribution</title>
      <link>https://xuanwo.org/2014/08/15/poj-3372-candy-distribution/</link>
      <pubDate>Fri, 15 Aug 2014 20:41:15 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/15/poj-3372-candy-distribution/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3372&#34;&gt;http://poj.org/problem?id=3372&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;找规律的题目，照例打表，发现只有2的次方才符合规律。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1969 Count on Canton</title>
      <link>https://xuanwo.org/2014/08/15/poj-1969-count-on-canton/</link>
      <pubDate>Fri, 15 Aug 2014 19:28:52 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/15/poj-1969-count-on-canton/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1969&#34;&gt;http://poj.org/problem?id=1969&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一道找规律的题目，只要把奇偶分开处理，结果很快出来了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1953 World Cup Noise</title>
      <link>https://xuanwo.org/2014/08/12/poj-1953-world-cup-noise/</link>
      <pubDate>Tue, 12 Aug 2014 05:19:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1953-world-cup-noise/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1953&#34;&gt;http://poj.org/problem?id=1953&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;稍微推了几个，发现是斐波那契数列，水之。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1833 排列</title>
      <link>https://xuanwo.org/2014/08/12/poj-1833-permutation/</link>
      <pubDate>Tue, 12 Aug 2014 05:12:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1833-permutation/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1833&#34;&gt;http://poj.org/problem?id=1833&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;再次使用&lt;code&gt;next_permutation&lt;/code&gt;水题。不过G++会超时，C++400ms+。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1611 The Suspects</title>
      <link>https://xuanwo.org/2014/08/12/poj-1611-the-suspects/</link>
      <pubDate>Tue, 12 Aug 2014 05:03:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1611-the-suspects/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1611&#34;&gt;http://poj.org/problem?id=1611&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;比较简单的并查集，照着模板敲。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1562 Oil Deposits</title>
      <link>https://xuanwo.org/2014/08/12/poj-1562-oil-deposits/</link>
      <pubDate>Tue, 12 Aug 2014 04:58:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1562-oil-deposits/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1562&#34;&gt;http://poj.org/problem?id=1562&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;使用DFS搜索石油所在的区块。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1411 Calling Extraterrestrial Intelligence Again</title>
      <link>https://xuanwo.org/2014/08/12/poj-1411-calling-extraterrestrial-intelligence-again/</link>
      <pubDate>Tue, 12 Aug 2014 04:54:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1411-calling-extraterrestrial-intelligence-again/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1411&#34;&gt;http://poj.org/problem?id=1411&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;打表暴力水过，估计是因为数据弱= =。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1488 TEX Quotes</title>
      <link>https://xuanwo.org/2014/08/12/poj-1488-tex-quotes/</link>
      <pubDate>Tue, 12 Aug 2014 04:51:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1488-tex-quotes/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1488&#34;&gt;http://poj.org/problem?id=1488&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;字符串处理- -，慢慢坑就是了。。注意输入方式，有空格的时候要用getline。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1455 Crazy tea party</title>
      <link>https://xuanwo.org/2014/08/12/poj-1455-crazy-tea-party/</link>
      <pubDate>Tue, 12 Aug 2014 04:37:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1455-crazy-tea-party/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1455&#34;&gt;http://poj.org/problem?id=1455&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;把n分成两部分，分别排序。唉= =，不机智了。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1477 Box of Bricks</title>
      <link>https://xuanwo.org/2014/08/12/poj-1477-box-of-bricks/</link>
      <pubDate>Tue, 12 Aug 2014 04:32:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1477-box-of-bricks/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1477&#34;&gt;http://poj.org/problem?id=1477&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;只有比平均数还要大的柱子需要移动，而移动的具体方式不需要考虑，明白了这一点就是水题了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1426 Find The Multiple</title>
      <link>https://xuanwo.org/2014/08/12/poj-1426-find-the-multiple/</link>
      <pubDate>Tue, 12 Aug 2014 04:27:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1426-find-the-multiple/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1426&#34;&gt;http://poj.org/problem?id=1426&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;使用了BFS来搜索满足条件的数，注意必须使用long long，否则数据不够。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1458 Common Subsequence</title>
      <link>https://xuanwo.org/2014/08/12/poj-1458-common-subsequence/</link>
      <pubDate>Tue, 12 Aug 2014 04:23:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1458-common-subsequence/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1458&#34;&gt;http://poj.org/problem?id=1458&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;DP的基础题，求最长子序列（LCS）。
状态转移方程伪代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (i == 0 || j == 0)
	dp[i,j] = 0
else if (X[i] == Y[j])
	dp[i,j] = dp[i-1,j-1] + 1
else
	dp[i,j] = max(dp[i-1,j], dp[i,j-1])

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1323 Game Prediction</title>
      <link>https://xuanwo.org/2014/08/12/poj-1323-game-prediction/</link>
      <pubDate>Tue, 12 Aug 2014 04:19:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1323-game-prediction/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1323&#34;&gt;http://poj.org/problem?id=1323&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;最优的方法是出一张比你出的牌大的牌中最小的牌，不过没有严格证明= =。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1338 Ugly Numbers</title>
      <link>https://xuanwo.org/2014/08/12/poj-1338-ugly-numbers/</link>
      <pubDate>Tue, 12 Aug 2014 04:11:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1338-ugly-numbers/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1338&#34;&gt;http://poj.org/problem?id=1338&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;本来貌似是一道很难的题目，不过因为数据比较弱，打表水过。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1363 Rails</title>
      <link>https://xuanwo.org/2014/08/12/poj-1363-rails/</link>
      <pubDate>Tue, 12 Aug 2014 04:07:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1363-rails/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1363&#34;&gt;http://poj.org/problem?id=1363&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一列火车，每个车厢都有编号，都可以单独行使，然后有一个火车站，进去之后，头变成尾，尾变成头，问能不能以输入的顺序出站。使用了STL栈。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1269 Intersecting Lines</title>
      <link>https://xuanwo.org/2014/08/12/poj-1269-intersecting-lines/</link>
      <pubDate>Tue, 12 Aug 2014 01:12:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1269-intersecting-lines/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1269&#34;&gt;http://poj.org/problem?id=1269&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;几何题= =，各种直线方程用起来，代码量有点大。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1183 反正切函数的应用</title>
      <link>https://xuanwo.org/2014/08/12/poj-1183-arctan/</link>
      <pubDate>Tue, 12 Aug 2014 01:01:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1183-arctan/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1183&#34;&gt;http://poj.org/problem?id=1183&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目不难，但是被数据类型坑了= =。
int不够，long long超时，使用unsigned int过了= =，感谢大神，坑了这么久。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1157 LITTLE SHOP OF FLOWERS</title>
      <link>https://xuanwo.org/2014/08/12/poj-1157-little-shop-of-flowers/</link>
      <pubDate>Tue, 12 Aug 2014 00:55:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1157-little-shop-of-flowers/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1157&#34;&gt;http://poj.org/problem?id=1157&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;满足的递推方程：&lt;code&gt;dp[i][j]=max(dp[i][j-1],dp[i-1][j-1]+map[i][j])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1160 Post Office</title>
      <link>https://xuanwo.org/2014/08/12/poj-1160-post-office/</link>
      <pubDate>Tue, 12 Aug 2014 00:45:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1160-post-office/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1160&#34;&gt;http://poj.org/problem?id=1160&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;很经典的邮局送信的DP问题。
不过提交的时候发现CE，&lt;code&gt;error: call of overloaded &#39;abs(int)&#39; is ambiguous&lt;/code&gt;，修改&lt;code&gt;cmath&lt;/code&gt;为&lt;code&gt;math.h&lt;/code&gt;之后，发现本机编译失败，添加了&lt;code&gt;cstdlib&lt;/code&gt;之后，顺利AC。这中间存在两个问题：第一，不是每一个X.h的库都跟cX命名的库一模一样；第二本地缺少的库可以通过编译，但是OJ不一定能通过。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1159 Palindrome</title>
      <link>https://xuanwo.org/2014/08/12/poj-1159-palindrome/</link>
      <pubDate>Tue, 12 Aug 2014 00:38:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1159-palindrome/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1159&#34;&gt;http://poj.org/problem?id=1159&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;最关键的公式是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (str[i] == str[j])
    DP[k][j] = DP[1 - k][j - 1];
else
    DP[k][j] = min(DP[1 - k][j], DP[k][j - 1]) + 1;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意到k空间的循环利用，节省了空间，感谢大牛提供的思路。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1051 P,MTHBGWB</title>
      <link>https://xuanwo.org/2014/08/12/poj-1051-p-mthbgwb/</link>
      <pubDate>Tue, 12 Aug 2014 00:31:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-1051-p-mthbgwb/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1051&#34;&gt;http://poj.org/problem?id=1051&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;简单的字符串转换，要有耐心= =，debug出翔。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3751 时间日期格式转换</title>
      <link>https://xuanwo.org/2014/08/12/poj-3751-date-transfer/</link>
      <pubDate>Tue, 12 Aug 2014 00:19:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/12/poj-3751-date-transfer/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3751&#34;&gt;http://poj.org/problem?id=3751&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;通过标记来判断正午和午夜，水题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1251 Jungle Roads</title>
      <link>https://xuanwo.org/2014/08/06/poj-1251-jungle-roads/</link>
      <pubDate>Wed, 06 Aug 2014 22:52:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/06/poj-1251-jungle-roads/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1251&#34;&gt;http://poj.org/problem?id=1251&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;同样是练习题，使用了Kruskal算法，对着模板敲的，理解的还不是很透彻。&lt;/p&gt;

&lt;p&gt;补充一个Prim算法的代码，神模板好评，自己对最小生成树的理解有了很大提高。在凌晨时分debug了半天，通过逐行打印，最终确认我错误的原因，没有进行初始化。虽然有点哭笑不得，但是感觉自己花了这三个小时是值得的。以后要避免这样的错误。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2485 Highways</title>
      <link>https://xuanwo.org/2014/08/06/poj-2485-highways/</link>
      <pubDate>Wed, 06 Aug 2014 22:47:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/06/poj-2485-highways/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2485&#34;&gt;http://poj.org/problem?id=2485&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;拖了很久的最小生成树练习题，对着模板想了很久。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3981 字符串替换</title>
      <link>https://xuanwo.org/2014/08/06/poj-3981-string-swap/</link>
      <pubDate>Wed, 06 Aug 2014 16:00:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/06/poj-3981-string-swap/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3981&#34;&gt;http://poj.org/problem?id=3981&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;大水题一道，字符串函数的简单运用&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2586 Y2K Accounting Bug</title>
      <link>https://xuanwo.org/2014/08/06/poj-2586-y2k-accounting-bug/</link>
      <pubDate>Wed, 06 Aug 2014 15:23:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/06/poj-2586-y2k-accounting-bug/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2586&#34;&gt;http://poj.org/problem?id=2586&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;总共有五种情况：
1、若SSSSD亏空，那么全年可能最大盈利情况为: SSSSDSSSSDSS
2、若SSSDD亏空，那么全年可能最大盈利情况为：SSSDDSSSDDSS
3、若SSDDD亏空，那么全年可能最大盈利情况为: SSDDDSSDDDSS
4、若SDDDD亏空，那么全年可能最大盈利情况为: SDDDDSDDDDSD
5、若DDDDD亏空，那么全年可能最大盈利情况为: DDDDDDDDDDDD&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2389 Bull Math</title>
      <link>https://xuanwo.org/2014/08/06/poj-2389-bull-math/</link>
      <pubDate>Wed, 06 Aug 2014 15:03:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/06/poj-2389-bull-math/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2389&#34;&gt;http://poj.org/problem?id=2389&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;没什么好说的，java大数模板水之。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2080 Calendar</title>
      <link>https://xuanwo.org/2014/08/06/poj-2080-calendar/</link>
      <pubDate>Wed, 06 Aug 2014 14:44:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/06/poj-2080-calendar/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2080&#34;&gt;http://poj.org/problem?id=2080&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;完全的模拟题。将给定的天数转化为年月日，注意闰年，大小月。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2039 To and Fro</title>
      <link>https://xuanwo.org/2014/08/06/poj-2039-to-and-fro/</link>
      <pubDate>Wed, 06 Aug 2014 14:33:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/06/poj-2039-to-and-fro/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2039&#34;&gt;http://poj.org/problem?id=2039&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;找规律的题目。
首先看一下加密的方式：
原文为&lt;code&gt;theresonoplacelikehomeonasnowynightx&lt;/code&gt;，分成N列来写，没有写满的用x填充，写成如下队列：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t o i o y
h p k n n
e l e a i
r a h s g
e c o n h
s e m o t
n l e w x

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于奇数行，从左向后书写，对于偶数行，从右向左书写，得到密文：
&lt;code&gt;toioynnkpheleaigshareconhtomesnlewx&lt;/code&gt;
显然，解密的方式就是原样还原回去。
一共进行N次读入，对于第i次读取，用j定位行数。
如果j为偶数，输出&lt;code&gt;N*j+i&lt;/code&gt;；
如果j为奇数，输出&lt;code&gt;N*(j+1)-1-i&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2019 Cornfields</title>
      <link>https://xuanwo.org/2014/08/06/poj-2019-cornfields/</link>
      <pubDate>Wed, 06 Aug 2014 14:20:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/06/poj-2019-cornfields/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2019&#34;&gt;http://poj.org/problem?id=2019&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;暴力水过的= =，大牛说是RMQ的题目，要是POJ数据强的话，估计就超时了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2028 When Can We Meet?</title>
      <link>https://xuanwo.org/2014/08/06/poj-2028-when-can-we-meet/</link>
      <pubDate>Wed, 06 Aug 2014 14:13:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/06/poj-2028-when-can-we-meet/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2028&#34;&gt;http://poj.org/problem?id=2028&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一边输入一边记录开会最多且最近的那天。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2017 Speed Limit</title>
      <link>https://xuanwo.org/2014/08/06/poj-2017-speed-limit/</link>
      <pubDate>Wed, 06 Aug 2014 14:06:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/06/poj-2017-speed-limit/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2017&#34;&gt;http://poj.org/problem?id=2017&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一道比较简单的模拟，跨项累加。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2013 Symmetric Order</title>
      <link>https://xuanwo.org/2014/08/05/poj-2013-symmetric-order/</link>
      <pubDate>Tue, 05 Aug 2014 21:40:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/05/poj-2013-symmetric-order/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2013&#34;&gt;http://poj.org/problem?id=2013&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一组字符串，从短到长再到短排列，相同长短的字符串按照字母表顺序排列。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2000 Gold Coins</title>
      <link>https://xuanwo.org/2014/08/05/poj-2000-gold-coins/</link>
      <pubDate>Tue, 05 Aug 2014 21:02:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/05/poj-2000-gold-coins/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2000&#34;&gt;http://poj.org/problem?id=2000&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;求N天得到多少个金币，第一天得到1个，第二、三天得到2个，第四、五、六天得到3个。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1939 Diplomatic License</title>
      <link>https://xuanwo.org/2014/08/05/poj-1939-diplomatic-license/</link>
      <pubDate>Tue, 05 Aug 2014 20:51:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/05/poj-1939-diplomatic-license/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1939&#34;&gt;http://poj.org/problem?id=1939&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;求多边形相邻两个点的中点= =，这是英语题吧。。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1936 All in All</title>
      <link>https://xuanwo.org/2014/08/05/poj-1936-all-in-all/</link>
      <pubDate>Tue, 05 Aug 2014 20:41:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/05/poj-1936-all-in-all/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1936&#34;&gt;http://poj.org/problem?id=1936&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;字符串的题目。因为数据水所以这是一道水题，要是数据再强一点估计就TLE了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1922 Ride to School</title>
      <link>https://xuanwo.org/2014/08/05/poj-1922-ride-to-school/</link>
      <pubDate>Tue, 05 Aug 2014 20:36:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/05/poj-1922-ride-to-school/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1922&#34;&gt;http://poj.org/problem?id=1922&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;第一眼感觉就是贪心，只要选择最快的单车就好，不用考虑中间的过程。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1862 Stripies</title>
      <link>https://xuanwo.org/2014/08/05/poj-1862-stripies/</link>
      <pubDate>Tue, 05 Aug 2014 20:31:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/05/poj-1862-stripies/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1862&#34;&gt;http://poj.org/problem?id=1862&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;原先质量越大的，如果越先被计算，那么开根号的次数就会越多，相比之下，最终结果就会越小。最后再排一下序就好。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1844 Sum</title>
      <link>https://xuanwo.org/2014/08/05/poj-1844-sum/</link>
      <pubDate>Tue, 05 Aug 2014 17:09:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/05/poj-1844-sum/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1844&#34;&gt;http://poj.org/problem?id=1844&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;有这样两种情况：
1. Sum(i) == S ，那么很明显 i 就是答案,直接输出即可。
2. Sum(i) &amp;gt; S , 从 i 开始,依次往后面 +1 枚举 ，只要遇到 (Sum(i) - S) % 2 == 0 输出答案就可以了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1799 Yeehaa!</title>
      <link>https://xuanwo.org/2014/08/05/poj-1799-yeehaa/</link>
      <pubDate>Tue, 05 Aug 2014 16:13:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/05/poj-1799-yeehaa/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1799&#34;&gt;http://poj.org/problem?id=1799&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;借用某大神图：
&lt;img src=&#34;https://xuanwo.org/imgs/exercise/POJ1799.png&#34; alt=&#34;POJ1799示意图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1731 Orders</title>
      <link>https://xuanwo.org/2014/08/05/poj-1731-orders/</link>
      <pubDate>Tue, 05 Aug 2014 15:57:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/05/poj-1731-orders/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1731&#34;&gt;http://poj.org/problem?id=1731&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;全排列的简单运用&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1664 放苹果</title>
      <link>https://xuanwo.org/2014/08/05/poj-1664-devide-apples/</link>
      <pubDate>Tue, 05 Aug 2014 15:47:50 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/05/poj-1664-devide-apples/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1664&#34;&gt;http://poj.org/problem?id=1664&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;有两种情况：
1. 至少空出一个盘子不放（相对于目前），则转化为在(n-1)个盘子里放m个苹果，在剩下的盘子里放入0个苹果，即apple(m,n-1)；
2. 所有盘子至少放入一个。先在每个盘子里都放入1个苹果，剩下m-n个苹果，再在n个盘子里进行放置。即apple(m-n,n)。
然后是结束的条件，有三种。
1. 当m==0时，苹果已经放完，只有一种情况，即不放置，返回1；
2. 当n==1时，只有一个盘子可以放置，返回1；
3. 当m&amp;lt;n时，苹果数小于盘子数，和将m个苹果放入m个盘子情况相同。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1663 Max Factor</title>
      <link>https://xuanwo.org/2014/08/03/poj-1663-number-steps/</link>
      <pubDate>Sun, 03 Aug 2014 12:27:41 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/03/poj-1663-number-steps/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1663&#34;&gt;http://poj.org/problem?id=1663&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;发现奇偶之间的规律之后，这也就是一道水题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1658 Eva&#39;s Problem</title>
      <link>https://xuanwo.org/2014/08/03/poj-1658-evas-problem/</link>
      <pubDate>Sun, 03 Aug 2014 12:19:40 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/03/poj-1658-evas-problem/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1658&#34;&gt;http://poj.org/problem?id=1658&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;额，水题一枚，直接算就好&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1604 Just the Facts</title>
      <link>https://xuanwo.org/2014/08/03/poj-1604-just-the-facts/</link>
      <pubDate>Sun, 03 Aug 2014 12:16:39 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/03/poj-1604-just-the-facts/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1604&#34;&gt;http://poj.org/problem?id=1604&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;只需要截取后面五位，避免超过int的范围&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1579 Function Run Fun</title>
      <link>https://xuanwo.org/2014/08/03/poj-1579-function-run-fun/</link>
      <pubDate>Sun, 03 Aug 2014 12:00:24 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/03/poj-1579-function-run-fun/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1579&#34;&gt;http://poj.org/problem?id=1579&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目很简单，就是递归。但是直接递归会导致超时，这里直接处理一下，超过20全都当作20来计算。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1575 Easier Done Than Said?</title>
      <link>https://xuanwo.org/2014/08/03/poj-1575-easier-done-than-said/</link>
      <pubDate>Sun, 03 Aug 2014 11:54:33 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/03/poj-1575-easier-done-than-said/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1575&#34;&gt;http://poj.org/problem?id=1575&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;运用三种标记，分别标记三种情况。对每一次字符读入均进行判断，一旦遇到不符合条件的，就直接退出循环。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1565 Skew数</title>
      <link>https://xuanwo.org/2014/08/03/poj-1565-skew-number/</link>
      <pubDate>Sun, 03 Aug 2014 11:43:36 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/03/poj-1565-skew-number/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1565&#34;&gt;http://poj.org/problem?id=1565&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;不难，按照规则计算即可，注意大数的处理。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1552 Doubles</title>
      <link>https://xuanwo.org/2014/08/03/poj-1552-doubles/</link>
      <pubDate>Sun, 03 Aug 2014 11:40:11 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/03/poj-1552-doubles/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1552&#34;&gt;http://poj.org/problem?id=1552&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;直接开一个数组，两个循环判断后一个数是不是前一个数的两倍。暴力做的，没有超时。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1543 Perfect Cubes</title>
      <link>https://xuanwo.org/2014/08/03/poj-1543-perfect-cubes/</link>
      <pubDate>Sun, 03 Aug 2014 11:36:27 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/03/poj-1543-perfect-cubes/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1543&#34;&gt;http://poj.org/problem?id=1543&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;暴力提交过了= =，怪我喽？&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1405 Heritage</title>
      <link>https://xuanwo.org/2014/08/03/poj-1405-heritage/</link>
      <pubDate>Sun, 03 Aug 2014 11:25:44 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/03/poj-1405-heritage/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1405&#34;&gt;http://poj.org/problem?id=1405&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;可以得出递推关系X(n+1) = Xn * X(n-1) + 1，考虑到数据较大，使用Java大数类A掉&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1979 Red and Black</title>
      <link>https://xuanwo.org/2014/08/02/poj-1979-red-and-black/</link>
      <pubDate>Sat, 02 Aug 2014 15:37:31 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/08/02/poj-1979-red-and-black/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1979&#34;&gt;http://poj.org/problem?id=1979&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一个比较简单的DFS练习题&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1528 Perfection</title>
      <link>https://xuanwo.org/2014/07/25/poj-1528-perfection/</link>
      <pubDate>Fri, 25 Jul 2014 04:34:58 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/25/poj-1528-perfection/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1528&#34;&gt;http://poj.org/problem?id=1528&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;一个数n的正因数之和等于n则输出&lt;code&gt;PERFECT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;大于n，输出&lt;code&gt;ABUNDANT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;小于n，输出&lt;code&gt;DEFICIENT&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;注意：因数不包括它本身&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1519 Digital Roots</title>
      <link>https://xuanwo.org/2014/07/25/poj-1519-digital-roots/</link>
      <pubDate>Fri, 25 Jul 2014 04:29:15 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/25/poj-1519-digital-roots/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1519&#34;&gt;http://poj.org/problem?id=1519&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这不就是弃九法么。把每个位置上数字相加迭代即可，但是多次WA，看了discuss才知道原来数据到了2000位的，只能用数组模拟。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1517 u Calculate e</title>
      <link>https://xuanwo.org/2014/07/25/poj-1517-u-calculate-e/</link>
      <pubDate>Fri, 25 Jul 2014 04:00:19 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/25/poj-1517-u-calculate-e/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1517&#34;&gt;http://poj.org/problem?id=1517&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;计算e的值。太自信，没有用打表，结果WA了两发，蛋疼。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1504 Adding Reversed Numbers</title>
      <link>https://xuanwo.org/2014/07/25/poj-1504-adding-reversed-numbers/</link>
      <pubDate>Fri, 25 Jul 2014 03:40:50 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/25/poj-1504-adding-reversed-numbers/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1504&#34;&gt;http://poj.org/problem?id=1504&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;同样是长长的题目，其实是要求把数字从左到右相加，本质是要用字符数组模拟加法。当然，用java会更快一点，不过这次选择了用C++来写。姿势不是很优美，代码太丑陋了，应该有更优美的写法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1493 Machined Surfaces</title>
      <link>https://xuanwo.org/2014/07/25/poj-1493-machined-surfaces/</link>
      <pubDate>Fri, 25 Jul 2014 02:59:11 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/25/poj-1493-machined-surfaces/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1493&#34;&gt;http://poj.org/problem?id=1493&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目虽然这么长，但是意思很简单，就是求左右合并之后中间剩下的空格数量。分别求出每行的空格数，排序，跟最小真相减之后叠加即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2891 Strange Way to Express Integers</title>
      <link>https://xuanwo.org/2014/07/24/poj-2891-strange-way-to-express-integers/</link>
      <pubDate>Thu, 24 Jul 2014 01:57:51 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/24/poj-2891-strange-way-to-express-integers/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2891&#34;&gt;http://poj.org/problem?id=2891&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;做的第一道关于扩展欧几里德方程的题目，还不够。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3518 Prime Gap</title>
      <link>https://xuanwo.org/2014/07/23/poj-3518-prime-gap/</link>
      <pubDate>Wed, 23 Jul 2014 23:50:16 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-3518-prime-gap/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3518&#34;&gt;http://poj.org/problem?id=3518&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;虽然看起来并没有二分计算的代码，但是应用了二分的思想。设两个端点，分别向两个方向扩展，最后的结果就是两个端点的差值。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3122 Pie</title>
      <link>https://xuanwo.org/2014/07/23/poj-3122-pie/</link>
      <pubDate>Wed, 23 Jul 2014 23:47:09 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-3122-pie/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3122&#34;&gt;http://poj.org/problem?id=3122&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这也是一道水题，二分切之。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3273 Monthly Expense</title>
      <link>https://xuanwo.org/2014/07/23/poj-3273-monthly-expense/</link>
      <pubDate>Wed, 23 Jul 2014 23:44:01 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-3273-monthly-expense/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3273&#34;&gt;http://poj.org/problem?id=3273&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;也是很久之前的一道题目，简单的二分。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1905 Expanding Rods</title>
      <link>https://xuanwo.org/2014/07/23/poj-1905-expanding-rods/</link>
      <pubDate>Wed, 23 Jul 2014 23:40:45 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-1905-expanding-rods/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1905&#34;&gt;http://poj.org/problem?id=1905&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;很久以前做的题目，是二分法最基础的运用。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2965 The Pilots Brothers&#39; refrigerator</title>
      <link>https://xuanwo.org/2014/07/23/poj-2965-the-pilots-brothers-refrigerator/</link>
      <pubDate>Wed, 23 Jul 2014 23:31:18 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-2965-the-pilots-brothers-refrigerator/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2965&#34;&gt;http://poj.org/problem?id=2965&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;参考的某神牛的解法：
&amp;gt;
证明:
1. 要使一个为&amp;rsquo;+&amp;lsquo;的符号变为&amp;rsquo;-&amp;lsquo;,必须其相应的行和列的操作数为奇数;可以证明,如果&amp;rsquo;+&amp;lsquo;位置对应的行和列上每一个位置都进行一次操作,则整个图只有这一&amp;rsquo;+&amp;lsquo;位置的符号改变,其余都不会改变.
2. 设置一个4*4的整型数组,初值为零,用于记录每个点的操作数,那么在每个&amp;rsquo;+&amp;lsquo;上的行和列的的位置都加1,得到结果模2(因为一个点进行偶数次操作的效果和没进行操作一样),然后计算整型数组中一的
3. 个数即为操作数,&amp;lsquo;-&amp;lsquo;的位置为要操作的位置(其他原来操作数为偶数的因为操作并不发生效果,因此不进行操作)&lt;/p&gt;

&lt;p&gt;只适用于这一道题，POJ上那道棋盘翻转貌似不能通用。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1423 Big Number</title>
      <link>https://xuanwo.org/2014/07/23/poj-1423-big-number/</link>
      <pubDate>Wed, 23 Jul 2014 23:26:52 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-1423-big-number/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1423&#34;&gt;http://poj.org/problem?id=1423&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;又是大数据的题目，果断用Java来做，不过还是用到了取对数得操作。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1401 Factorial</title>
      <link>https://xuanwo.org/2014/07/23/poj-1401-factorial/</link>
      <pubDate>Wed, 23 Jul 2014 14:48:05 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-1401-factorial/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1401&#34;&gt;http://poj.org/problem?id=1401&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一开始惊讶地发现，每个数除以4之后都跟答案比较接近，然后打算开始偷鸡，结果失败了= =。实际上，是每一个数不停地除以5，寻找10的因子的过程。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1326 Mileage Bank</title>
      <link>https://xuanwo.org/2014/07/23/poj-1326-mileage-bank/</link>
      <pubDate>Wed, 23 Jul 2014 14:10:08 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-1326-mileage-bank/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1326&#34;&gt;http://poj.org/problem?id=1326&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目倒是不难，但是这个输入真的是。。。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1061 青蛙的约会</title>
      <link>https://xuanwo.org/2014/07/23/poj-1061-date-of-frogs/</link>
      <pubDate>Wed, 23 Jul 2014 13:49:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-1061-date-of-frogs/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1061&#34;&gt;http://poj.org/problem?id=1061&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;扩展欧几里德方程的模板体。当初没有做出来，现在好像明白一点了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1318 Word Amalgamation</title>
      <link>https://xuanwo.org/2014/07/23/poj-1318-word-amalgamation/</link>
      <pubDate>Wed, 23 Jul 2014 13:38:41 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-1318-word-amalgamation/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1318&#34;&gt;http://poj.org/problem?id=1318&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一开始的思路有点偏，想要单纯的使用string类的compare函数来解决问题。但是稍微考虑一下之后发现，复杂度有点高。事实上，我根本就不需要知道它们是不是匹配，只要排序之后匹配即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1316 Self Numbers</title>
      <link>https://xuanwo.org/2014/07/23/poj-1316-self-numbers/</link>
      <pubDate>Wed, 23 Jul 2014 02:43:24 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-1316-self-numbers/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1316&#34;&gt;http://poj.org/problem?id=1316&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;水题，开一个数组模拟，水过～&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1298 史上最难的问题</title>
      <link>https://xuanwo.org/2014/07/23/poj-1298-the-hardest-problem-ever/</link>
      <pubDate>Wed, 23 Jul 2014 02:35:36 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-1298-the-hardest-problem-ever/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1298&#34;&gt;http://poj.org/problem?id=1298&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;问题的纠结之处在于编译器根本就不给&lt;code&gt;gets&lt;/code&gt;和&lt;code&gt;puts&lt;/code&gt;改过自新的机会，调试花了很久= =。恩，我也应该培养避免使用这些函数的习惯。回到题目上来，题意还是比较清楚的，向后移动五位即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1256 Anagram</title>
      <link>https://xuanwo.org/2014/07/23/poj-1256-anagram/</link>
      <pubDate>Wed, 23 Jul 2014 02:07:50 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-1256-anagram/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1256&#34;&gt;http://poj.org/problem?id=1256&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;再次遇到一道使用&lt;code&gt;next_permutation&lt;/code&gt;的题目，不过这一次需要针对题目的给出的条件重新写一个&lt;code&gt;cmp&lt;/code&gt;函数。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1247 Magnificent Meatballs</title>
      <link>https://xuanwo.org/2014/07/23/poj-1247-magnificent-meatballs/</link>
      <pubDate>Wed, 23 Jul 2014 02:03:12 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/23/poj-1247-magnificent-meatballs/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1247&#34;&gt;http://poj.org/problem?id=1247&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;让给的肉丸子少的人继续给，直到最后判断是否相等。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1218 THE DRUNK JAILER</title>
      <link>https://xuanwo.org/2014/07/22/poj-1218-the-drunk-jailer/</link>
      <pubDate>Tue, 22 Jul 2014 21:37:10 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-1218-the-drunk-jailer/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1218&#34;&gt;http://poj.org/problem?id=1218&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;汗= =，偷鸡水过了，正好是牢房数的平方根向下取整，不过没有严格的证明&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1163 The Triangle</title>
      <link>https://xuanwo.org/2014/07/22/poj-1163-the-triangle/</link>
      <pubDate>Tue, 22 Jul 2014 21:12:47 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-1163-the-triangle/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1163&#34;&gt;http://poj.org/problem?id=1163&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这是第一道关于DP的题目，据说是用暴力的方法会直接超时，因为有大量的重复计算。使用DP可以避免这一点，最关键的公式是
&lt;code&gt;triangle[i][j] += max(triangle[i + 1][j] : triangle[i + 1][j + 1])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1083 Moving Tables</title>
      <link>https://xuanwo.org/2014/07/22/poj-1083-moving-tables/</link>
      <pubDate>Tue, 22 Jul 2014 21:03:10 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-1083-moving-tables/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1083&#34;&gt;http://poj.org/problem?id=1083&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目不难，关键在于理解题意。开一个数组，求出每一张桌子移动的时间，遍历找出最大值即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1146 ID Codes</title>
      <link>https://xuanwo.org/2014/07/22/poj-1146-id-codes/</link>
      <pubDate>Tue, 22 Jul 2014 20:52:19 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-1146-id-codes/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1146&#34;&gt;http://poj.org/problem?id=1146&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;使用&lt;code&gt;STL&lt;/code&gt;里面的&lt;code&gt;next_permutation&lt;/code&gt;轻松水掉。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1068 Parencodings</title>
      <link>https://xuanwo.org/2014/07/22/poj-1068-parencodings/</link>
      <pubDate>Tue, 22 Jul 2014 20:37:35 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-1068-parencodings/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1068&#34;&gt;http://poj.org/problem?id=1068&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;模拟栈操作，主要是对题目意思的理解。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2492 A Bug&#39;s Life</title>
      <link>https://xuanwo.org/2014/07/22/poj-2492-a-bugs-life/</link>
      <pubDate>Tue, 22 Jul 2014 17:12:30 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-2492-a-bugs-life/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2492&#34;&gt;http://poj.org/problem?id=2492&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;当初学习并查集的时候做得题目，是一个比较经典的关于并查集的题目&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1988 Cube Stacking</title>
      <link>https://xuanwo.org/2014/07/22/poj-1988-cube-stacking/</link>
      <pubDate>Tue, 22 Jul 2014 16:36:53 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-1988-cube-stacking/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1988&#34;&gt;http://poj.org/problem?id=1988&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这道题也想了很久。问题主要出在堆叠得过程中，我只考虑了根节点的变化，而没有去更新位于同一个根节点下的方块的高度变化。发现问题之后，试图寻找到一种有效得递归方法，但是失败了。无奈之后，决定再开一个deep数组来保存当前节点到根节点之间的深度差。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1703 Find them, Catch them</title>
      <link>https://xuanwo.org/2014/07/22/poj-1703-find-them-catch-them/</link>
      <pubDate>Tue, 22 Jul 2014 13:51:22 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-1703-find-them-catch-them/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1703&#34;&gt;http://poj.org/problem?id=1703&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这个并查集有点不一样，之前做过的全都是判断是否连通，这一次确实要判断是否不连通。想了一想，其实还是可以转换过来的。假定r1，r2分别表示ab，bc之间的关系，0表示相同，1表示不同，则有下面的逻辑表。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;(a, b)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;(b, c)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;(a, c)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;(r1+r2)%2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1308 Is It A Tree?</title>
      <link>https://xuanwo.org/2014/07/22/poj-1308-is-it-a-tree/</link>
      <pubDate>Tue, 22 Jul 2014 04:16:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-1308-is-it-a-tree/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1308&#34;&gt;http://poj.org/problem?id=1308&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;同样是并查集的应用，难点在于如何判断给定的点之间是否形成了森林。事实上，只要判断树与树之间有没有成环即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2524 Ubiquitous Religions</title>
      <link>https://xuanwo.org/2014/07/22/poj-2524-ubiquitous-religions/</link>
      <pubDate>Tue, 22 Jul 2014 03:45:40 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-2524-ubiquitous-religions/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2524&#34;&gt;http://poj.org/problem?id=2524&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;POJ上最简单的一道关于并查集的题目，没有使用路径压缩，没有进行优化，直接水过。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1082 食物链</title>
      <link>https://xuanwo.org/2014/07/22/poj-1082-food-links/</link>
      <pubDate>Tue, 22 Jul 2014 02:43:08 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/22/poj-1082-food-links/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1082&#34;&gt;http://poj.org/problem?id=1082&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;理解时候的困难在于如何把题目中吃与被吃的关系用一个计算机能理解的方式表达出来。后来使用了0表示他们是同类，用1表示a吃b，用2表示b吃a。再使用并查集的相关知识得到最后得结果。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1046 Color Me Less</title>
      <link>https://xuanwo.org/2014/07/21/poj-1046-color-me-less/</link>
      <pubDate>Mon, 21 Jul 2014 15:55:53 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/21/poj-1046-color-me-less/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1046&#34;&gt;http://poj.org/problem?id=1046&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题目并不难，暴力水过即可。用到了结构体的知识，可惜我对结构体的理解还是太过于表层。其实我可以把结构体作为函数的参数输入，这样可以减少很大的代码量。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1028 Web Navigation</title>
      <link>https://xuanwo.org/2014/07/20/poj-1028-web-navigation/</link>
      <pubDate>Sun, 20 Jul 2014 15:40:31 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/20/poj-1028-web-navigation/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1028&#34;&gt;http://poj.org/problem?id=1028&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这是一道STL里面的栈的运用的一个模板题。构建两个栈，一个存放forward，一个存放backward，然后后再建立一个string类用于存放浏览器当前的页面。题目不难，但是要理解你现在的操作对栈影响是什么，先后顺序一点都不能错。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1045 Bode Plot</title>
      <link>https://xuanwo.org/2014/07/20/poj-1045-bode-plot/</link>
      <pubDate>Sun, 20 Jul 2014 14:39:05 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/20/poj-1045-bode-plot/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1045&#34;&gt;http://poj.org/problem?id=1045&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;额- -，居然考到了物理公式。推倒的过程中，卡在了题目中的相位不是已知量。知道看了discuss才明白，可以通过令t=0特殊值带入的方法求解。果真是物理题做得少了- -，不机智了。类似于这样的精度问题，G++都是WA，只有C++才能A。至今不知原因。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2199 Rate of Return</title>
      <link>https://xuanwo.org/2014/07/20/poj-2199-rate-of-return/</link>
      <pubDate>Sun, 20 Jul 2014 14:25:25 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/20/poj-2199-rate-of-return/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2199&#34;&gt;http://poj.org/problem?id=2199&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;感觉题目并不是很难。给出n个月，每个月都存进去一定的钱，然后第n+1个月给出到这个月为止的本息和。运用二分法，逐步逼近，直到达到了精度要求。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1047 Round and Round We Go</title>
      <link>https://xuanwo.org/2014/07/18/poj-1047-round-and-round-we-go/</link>
      <pubDate>Fri, 18 Jul 2014 17:38:41 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/18/poj-1047-round-and-round-we-go/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1047&#34;&gt;http://poj.org/problem?id=1047&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一开始觉得很麻烦，打算用字符串+排序来处理是否符合题意。但是无意中发现，事实上当一个数是循环数的时候，这个数本身乘以它的长度+1恰好使得每一位上的数都是9，比如&lt;code&gt;142857*(6+1)=999999&lt;/code&gt;。发现了这一点，题目就变成一道水题了。用java的高精度类水掉即可～&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1306 Combinations</title>
      <link>https://xuanwo.org/2014/07/18/poj-1306-combinations/</link>
      <pubDate>Fri, 18 Jul 2014 15:43:53 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/18/poj-1306-combinations/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1306&#34;&gt;http://poj.org/problem?id=1306&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;高精度阶乘的题目，再次用java水掉= =。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1131 Octal Fractions</title>
      <link>https://xuanwo.org/2014/07/18/poj-1131-octal-fractions/</link>
      <pubDate>Fri, 18 Jul 2014 15:29:12 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/18/poj-1131-octal-fractions/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1131&#34;&gt;http://poj.org/problem?id=1131&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意挺简单，就是把八进制浮点数转化为十进制，同样是用高精度类，叠乘即可～&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1503 Integer Inquiry</title>
      <link>https://xuanwo.org/2014/07/18/poj-1503-integer-inquiry/</link>
      <pubDate>Fri, 18 Jul 2014 15:04:04 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/18/poj-1503-integer-inquiry/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1503&#34;&gt;http://poj.org/problem?id=1503&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;还是高精度计算，大数相加～&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2305 Basic remains</title>
      <link>https://xuanwo.org/2014/07/18/poj-2305-basic-remains/</link>
      <pubDate>Fri, 18 Jul 2014 14:46:10 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/18/poj-2305-basic-remains/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2305&#34;&gt;http://poj.org/problem?id=2305&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;高精度计算题啊，用Java的高精度类水过。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3048 Max Factor</title>
      <link>https://xuanwo.org/2014/07/18/poj-3307-smart-sister/</link>
      <pubDate>Fri, 18 Jul 2014 00:23:10 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/18/poj-3307-smart-sister/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3307&#34;&gt;http://poj.org/problem?id=3307&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;如果一个数可以通过其他数的各数字位相乘得到，则说这个数具有&lt;code&gt;productivity property&lt;/code&gt;。要求求出第i个具有这种性质的数。我们考虑1～9这些数字，显然，我们只要考虑1，2，3，5，7这四个质因数，因为别的数都能通过他们来得到，于是可以得到代码。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2081 Recaman&#39;s Sequence</title>
      <link>https://xuanwo.org/2014/07/17/poj-2081-recamans-sequence/</link>
      <pubDate>Thu, 17 Jul 2014 23:53:55 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/17/poj-2081-recamans-sequence/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2081&#34;&gt;http://poj.org/problem?id=2081&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;简单的计算题。利用打表的方法，空间换时间。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2153 Rank List</title>
      <link>https://xuanwo.org/2014/07/16/poj-2153-rank-list/</link>
      <pubDate>Wed, 16 Jul 2014 22:55:02 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/16/poj-2153-rank-list/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2153&#34;&gt;http://poj.org/problem?id=2153&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;感觉不是很难，因为数据量不是很大，将人和成绩一一映射，然后遍历即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1014 Dividing</title>
      <link>https://xuanwo.org/2014/07/16/poj-1014-dividing/</link>
      <pubDate>Wed, 16 Jul 2014 15:25:02 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/16/poj-1014-dividing/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1014&#34;&gt;http://poj.org/problem?id=1014&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;我的思路非常直接，直接当成一道数学题来解。于是把所有的数都mod2，得到了一个二进制串，然后以这个为基础，开始寻找特例，结果挂的很惨。比如&lt;code&gt;0 3 2 0 0 0&lt;/code&gt;，这种情况是在mod2的时候直接就舍去的。说明我这种方法本质上有着缺陷。网上的大牛们大多采用了多重背包的方法，但是有一个人在discuss中提出了mod60的方法。实际上，这个是mod2思路的进一步延伸，也就是解决了&lt;code&gt;0 3 2 0 0 0&lt;/code&gt;这种类型的特例。然后再不断的用sum去减，判断最后能都减至0，实质上是用了DFS。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1012 Joseph</title>
      <link>https://xuanwo.org/2014/07/16/poj-1012-joseph/</link>
      <pubDate>Wed, 16 Jul 2014 14:22:30 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/16/poj-1012-joseph/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1012&#34;&gt;http://poj.org/problem?id=1012&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;用模拟的方法貌似会超时。直接打了一个表，求出0到14之间每一种k的值对应的m值，再根据输入输出就OK。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1011 木棒</title>
      <link>https://xuanwo.org/2014/07/16/poj-1011-sticks/</link>
      <pubDate>Wed, 16 Jul 2014 12:20:44 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/16/poj-1011-sticks/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1011&#34;&gt;http://poj.org/problem?id=1011&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一开始的想法比较简单，单纯的求和然后找出最短的那根。但是这样的做法有下面的一些问题：第一，最后的棒子的和不能比最短的棒子还短；第二，最后的棒子必须是由给定的棒子合成的。因此只能使用搜索的方法，但是常规的搜索会超时，必须辅以有效的剪枝，以下是参考之后的代码。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1001 求高精度幂</title>
      <link>https://xuanwo.org/2014/07/15/poj-1001-big-decimal/</link>
      <pubDate>Tue, 15 Jul 2014 23:09:03 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/15/poj-1001-big-decimal/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1001&#34;&gt;http://poj.org/problem?id=1001&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;搜索高精度计算的时候发现java自带了关于高精度处理的类，毫不客气的拿来用了～&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2800 Joseph&#39;s Problem</title>
      <link>https://xuanwo.org/2014/07/15/poj-2800-josephs-problem/</link>
      <pubDate>Tue, 15 Jul 2014 20:41:42 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/15/poj-2800-josephs-problem/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2800&#34;&gt;http://poj.org/problem?id=2800&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;抱着侥幸心理使用了一般的方法来求，果然TLE了。然后开始计算∑1&amp;lt;=i&amp;lt;=n(k mod i)。由分析之，总共有三种情况，k&lt;n，k=n，k&gt;n。分别寻找规律并转化为等差数列简化运算。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2680 Computer Transformation</title>
      <link>https://xuanwo.org/2014/07/15/poj-2680-computer-transformation/</link>
      <pubDate>Tue, 15 Jul 2014 19:28:08 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/15/poj-2680-computer-transformation/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3048&#34;&gt;http://poj.org/problem?id=3048&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;数学规律并不难，很容易推出f[n]=f[n-1]+f[n-2]*2。但是2^1000次方，必须使用一定的手段来处理这个超大的数据。这里使用了一种比较简单的技巧，数组模拟。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2818 Making Change</title>
      <link>https://xuanwo.org/2014/07/15/poj-2818-making-change/</link>
      <pubDate>Tue, 15 Jul 2014 16:50:50 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/15/poj-2818-making-change/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2818&#34;&gt;http://poj.org/problem?id=2818&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;感觉很水的一道题，不知道为什么交题的人很少（吐槽一下坑爹的美元换算）。用DFS水掉了，分别从dispenser到pennies来算一遍就OK。我本以为用四个for也能过，但是discuss上面有人说过不了，TLE。有时间我试试看。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2714 Random Walk</title>
      <link>https://xuanwo.org/2014/07/15/poj-2714-random-walk/</link>
      <pubDate>Tue, 15 Jul 2014 15:55:21 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/15/poj-2714-random-walk/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2714&#34;&gt;http://poj.org/problem?id=2714&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一开始以为只是一道简单的求解最远距离的题目，但是敲完代码之后发现前两个样例过了，最后一个样例数据差距很大。然后仔细读题才发现，题目中给定的正负是不定的= =。一时间没有思路，以为需要使用DP的思想，然后去看了&lt;code&gt;discuss&lt;/code&gt;，才明白用枚举的方法列出每一个向量，减少了很大的复杂度，使得问题能在1s之内解决。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3048 Max Factor</title>
      <link>https://xuanwo.org/2014/07/14/poj-3048-max-factor/</link>
      <pubDate>Mon, 14 Jul 2014 17:21:24 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/14/poj-3048-max-factor/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3048&#34;&gt;http://poj.org/problem?id=3048&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这不是我做过的最简单的题目，但一定是我做起来最逗比的题目。题意很明白，就是输出给定的数里面有最大值质因数的那个。题意中明确说明给定的数的范围是1到20000，然后我就开始机智了，20000的开方约为141，我只要打一个1到150以内所有素数的表，就OK啦～空间换时间，复杂度低得很。开开心心的敲完代码，结果WA了。看了一下discuss，针对一些特例微调了一下代码，结果还是WA。然后就进入坑爹模式，一坑就是一个下午。直到终于忍不住了，去问学长，学长看了一眼，说150到20000之间的质数呢？恍然大悟= =，没有考虑本身也是质数的情况，坑。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1017 Packets</title>
      <link>https://xuanwo.org/2014/07/13/poj-1017-packets/</link>
      <pubDate>Sun, 13 Jul 2014 16:42:02 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/13/poj-1017-packets/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1017&#34;&gt;http://poj.org/problem?id=1017&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;在COJ上有一道一模一样的题目，当时做的时候没有做出来，因为没有考虑好剩余空间的利用。6*6和1*1的情况最为简单，但是其余的情况就分情况考虑了，特别是对于3*3这种情况而言，因为一个箱子正好可以装4个3*3的产品。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1657 Distance on Chessboard</title>
      <link>https://xuanwo.org/2014/07/13/poj-1657-distance-on-chessboard/</link>
      <pubDate>Sun, 13 Jul 2014 16:42:02 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/13/poj-1657-distance-on-chessboard/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1657&#34;&gt;http://poj.org/problem?id=1657&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;再一次脑洞大开了= =，居然还写了一个&lt;code&gt;normalize&lt;/code&gt;函数用来区分是不是可行的走法，其实只要通过&lt;code&gt;abs(x-y)%2!=0&lt;/code&gt;即可实现判断斜的方向上是否可以行走了。恩，这是程序设计实践导引上的例题，加上中文，没有什么好讲的。不过需要注意位置没有发生改变时的特殊情况。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3194 Equidivisions</title>
      <link>https://xuanwo.org/2014/07/12/poj-3194-equidivisions/</link>
      <pubDate>Sat, 12 Jul 2014 23:12:37 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/12/poj-3194-equidivisions/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3194&#34;&gt;http://poj.org/problem?id=3194&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;本以为只要逐个判断每一个数是否有相邻即可，事实上，少考虑了一种情况。
比如下面给出的这种：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2211
1111
1111
1122

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据我原来的思路这种也是good，但其实并不是如此。当然，这个例子并不完备，但用于指出原来思路的漏洞已经够了。正确的思路应当是使用DFS来寻找是否存在独立的区块。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2386 Lake Counting</title>
      <link>https://xuanwo.org/2014/07/12/poj-2386-lake-counting/</link>
      <pubDate>Sat, 12 Jul 2014 21:34:56 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/12/poj-2386-lake-counting/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2386&#34;&gt;http://poj.org/problem?id=2386&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;当年学习DFS的AC掉的一道水题。DFS的经典模板，通过找出全部的相连池塘块来确定有几块池塘。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1321 棋盘问题</title>
      <link>https://xuanwo.org/2014/07/12/poj-1321-chess-problem/</link>
      <pubDate>Sat, 12 Jul 2014 21:30:59 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/12/poj-1321-chess-problem/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1321&#34;&gt;http://poj.org/problem?id=1321&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;感觉还是蛮简单的一道题目，主要是因为数据特别水，最大只有8*8的棋盘，用DFS按照行来搜索。主要的问题在于如何确保同列不存在重复的棋子。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1190 生日蛋糕</title>
      <link>https://xuanwo.org/2014/07/12/poj-1190-birthay-cake/</link>
      <pubDate>Sat, 12 Jul 2014 20:48:21 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/12/poj-1190-birthay-cake/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1190&#34;&gt;http://poj.org/problem?id=1190&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;这道题是学长推荐的DFS练习题，一开始没有想明白，为什么这道题是DFS。多次推导之后发现，这道题确实需要用到深度搜索。每次都先确定第一层蛋糕的体积数，然后减去得到剩余的蛋糕体积，如此循坏，最后要保证最后的体积和等于给定的N。因为半径是递增的，所以可以去掉很大一部分无效的搜索。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2488 A Knight&#39;s Journey</title>
      <link>https://xuanwo.org/2014/07/12/poj-2488-a-knights-journey/</link>
      <pubDate>Sat, 12 Jul 2014 19:59:14 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/12/poj-2488-a-knights-journey/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2488&#34;&gt;http://poj.org/problem?id=2488&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一开始没看懂，看了几遍之后才明白。是给定一个p*q的棋盘，要求计算出是否存在可能性使得骑士走遍整个棋盘，并要求按照字典序排列。这个字典序真的是要我的命，直接导致挂了很多次，还傻傻地去群里面问这道题是不是Special Judge= =。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1018 Communication System</title>
      <link>https://xuanwo.org/2014/07/12/poj-1018-communication-system/</link>
      <pubDate>Sat, 12 Jul 2014 13:06:29 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/12/poj-1018-communication-system/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1018&#34;&gt;http://poj.org/problem?id=1018&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;题意比较清晰，就是找出最大的B/sum(P)，要求网络设备的性价比最高。采用枚举的方法，把所有情况都列出来，然后有些明显不需要考虑的情况，可以直接舍去。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1753 Flip Game</title>
      <link>https://xuanwo.org/2014/07/12/poj-1753-flip-game/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/12/poj-1753-flip-game/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1753&#34;&gt;http://poj.org/problem?id=1753&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;我一开始的思路是错误的，企图通过正面的方法来找出从当前情况达到全白和全黑的方法，多次尝试之后，发现很难找到一条通用的方法，只能找出几个比较简单的特例。后来才明白过来，应当从全黑或者全白的情况出发，再来判断给定的图是不是其中的一个子集。因为是一个4X4的格子，不难看出，总共的情况只有2^16种。只要一一枚举即可。最后的步数就是这颗树的深度，使用DFS即可实现。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2739 Sum of Consecutive Prime Numbers</title>
      <link>https://xuanwo.org/2014/07/11/poj-2739-sum-of-consecutive-prime-numbers/</link>
      <pubDate>Fri, 11 Jul 2014 19:49:38 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/11/poj-2739-sum-of-consecutive-prime-numbers/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2739&#34;&gt;http://poj.org/problem?id=2739&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;跑偏了= =。&lt;code&gt;An output line includes the number of representations for the input integer as the sum of one or more consecutive prime numbers.&lt;/code&gt;居然理解成输出用于表示的质数的个数了，卡了很久。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 2159 Ancient Cipher</title>
      <link>https://xuanwo.org/2014/07/11/poj-2159-ancient-cipher/</link>
      <pubDate>Fri, 11 Jul 2014 13:30:04 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/11/poj-2159-ancient-cipher/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=2159&#34;&gt;http://poj.org/problem?id=2159&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一开始的理解是按照题目的意思，先进行一次置换加密再进行一次排列加密。置换只要按照规律一个一个替换就OK，排列加密则用到了&lt;code&gt;next_permutation&lt;/code&gt;函数。两重for循环，模拟出去全部的加密方法。Coding出来之后提交，WA。然后才开始审视另外的可能性：谁说置换就一定要按照规律来？事实上，的确如此，按照题意，只需要明文和密文字符形成唯一映射就OK。如果还是按照原来的思路，这道水题还真的不水。其实，在加密过程中，有一样东西是不变的，就是各个字符（对应）出现的频率。这样想的话，就简单了，只要统计出每个字符出现的概率，sort排序后，判断两个数组是否完全一致就好～&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 3299 Humidex</title>
      <link>https://xuanwo.org/2014/07/10/poj-3299-humidex/</link>
      <pubDate>Thu, 10 Jul 2014 23:14:26 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/10/poj-3299-humidex/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=3299&#34;&gt;http://poj.org/problem?id=3299&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;我的理解有误。主要是看input里面都是给定T，D求H的情况，便以为这道题就是用一下公式。没想到这道题还有其他的两种情况。说明不管在怎样的条件下，看题都是至关重要的一步。还有就是在输入输出上，&lt;code&gt;%s&lt;/code&gt;和&lt;code&gt;%c&lt;/code&gt;的区别，值得注意。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1207 The 3n &#43; 1 problem</title>
      <link>https://xuanwo.org/2014/07/10/poj-1207-the-3n&#43;1-problem/</link>
      <pubDate>Thu, 10 Jul 2014 16:55:39 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/10/poj-1207-the-3n&#43;1-problem/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1207&#34;&gt;http://poj.org/problem?id=1207&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;额，题意很清楚。就是一道关于3n+1的规律题，要求找出给定的i和j之间最长的循环数列。但是我坑了很久，因为错误的使用了A?B:C这样的三元运算符，被学姐学长痛批一顿之后，果断修改了。AC之余，提醒自己一下，良好的代码规范的重要性。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1013 Counterfeit Dollar</title>
      <link>https://xuanwo.org/2014/07/10/poj-1013-counterfeit-dollar/</link>
      <pubDate>Thu, 10 Jul 2014 14:22:44 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/10/poj-1013-counterfeit-dollar/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1013&#34;&gt;http://poj.org/problem?id=1013&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;总共有12枚银币，里面有一枚是假货。要求通过三次称量，找出那枚假币，并说出是重了还是轻了。题目中明确指出，三次称量必定能找出那枚假货，使得问题简化了很多。一开始的想法是完全模拟出来，但写到代码的时候感觉过于蛋疼，然后想能不能用一些由计算机来推导的方法。在具体的实现中，发现我很难把问题抽象成计算机可以处理的问题。在一份&lt;a href=&#34;http://blog.csdn.net/lyy289065406/article/details/6661421&#34;&gt;解题报告&lt;/a&gt;的启发下，想到了使用一个数值来度量每个银币可能为假币的可能性的方法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1008 Maya Calendar</title>
      <link>https://xuanwo.org/2014/07/07/poj-1008-maya-calendar/</link>
      <pubDate>Mon, 07 Jul 2014 23:04:08 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/07/poj-1008-maya-calendar/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1008&#34;&gt;http://poj.org/problem?id=1008&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;两种纪年法的转换，另外设一个&lt;code&gt;days&lt;/code&gt;的变量保存总天数，然后以它为基准进行变换，没有什么难度。但是在具体的方法上，还是有些优化的余地。比如我不用写那么多长长的if判断语句，使用一个&lt;code&gt;string&lt;/code&gt;数组就可以轻松搞定了，这是我不机智的地方。此外，应当注意到，两种纪年法的第一天分别是0和1，要小心。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1007 DNA Sorting</title>
      <link>https://xuanwo.org/2014/07/07/poj-1007-dna-sorting/</link>
      <pubDate>Mon, 07 Jul 2014 14:09:22 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/07/poj-1007-dna-sorting/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1007&#34;&gt;http://poj.org/problem?id=1007&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;我再一次把问题想的太复杂了，其实就是一个计算逆序数并且排序的一个过程。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1006 Biorhythms</title>
      <link>https://xuanwo.org/2014/07/06/poj-1006-biorhythms/</link>
      <pubDate>Sun, 06 Jul 2014 19:30:41 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/06/poj-1006-biorhythms/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1006&#34;&gt;http://poj.org/problem?id=1006&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;基本上就是孙子兵法，求那个最小的公倍数。记得华罗庚先生也写过同余式的相关著作。恩，找出规律之后，轻松水掉。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1005 I Think I Need a Houseboat</title>
      <link>https://xuanwo.org/2014/07/06/poj-1005-i-think-i-need-a-houseboat/</link>
      <pubDate>Sun, 06 Jul 2014 19:04:08 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/06/poj-1005-i-think-i-need-a-houseboat/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1005&#34;&gt;http://poj.org/problem?id=1005&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;一块地按照&lt;code&gt;50 square miles each year&lt;/code&gt;的速度被腐蚀，给定一个坐标要求计算到第几年的时候被腐蚀。自然是一道大水题：计算出给定坐标到原点的距离，取这个距离为半径求出实际的半圆面积，然后跟已经被腐蚀的面积比较一下即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1004 Financial Management</title>
      <link>https://xuanwo.org/2014/07/04/poj-1004-financial-management/</link>
      <pubDate>Fri, 04 Jul 2014 18:41:50 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/04/poj-1004-financial-management/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1004&#34;&gt;http://poj.org/problem?id=1004&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;额，就是求解12个数的平均数。不过据说POJ不能用lf，还要我没有遇到这样的问题，交了一个float水过。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1003 Hangover</title>
      <link>https://xuanwo.org/2014/07/04/poj-1003-hangover/</link>
      <pubDate>Fri, 04 Jul 2014 07:33:55 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/04/poj-1003-hangover/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1003&#34;&gt;http://poj.org/problem?id=1003&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;嗯哼，一道水题，用模拟水过。唯一自认为值得注意的地方是精度的问题，在比较的时候使用了两者之差小于0.001来判断他们是否相等。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>POJ 1002 487-3279</title>
      <link>https://xuanwo.org/2014/07/03/poj-1002-487-3279/</link>
      <pubDate>Thu, 03 Jul 2014 23:21:32 +0000</pubDate>
      
      <guid>https://xuanwo.org/2014/07/03/poj-1002-487-3279/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;源地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://poj.org/problem?id=1002&#34;&gt;http://poj.org/problem?id=1002&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;理解&#34;&gt;理解&lt;/h1&gt;

&lt;p&gt;简单一看就是一道关于字典的题目，将ABC等字符转化为对应的数字，从而求出这个字符串所对应的电话号码。
然后就是我不机智的地方了。我求出的电话号码依然是使用char数组类型保存的，比较的时候使用了strcmp函数，为了降低复杂度，还使用了各种标记，最后就是一团乱麻。在点拨之后才发现，直接转化为int型，然后sort排序，轻松搞定。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>